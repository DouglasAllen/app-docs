
<!--  Presentation generated by Internet Assistant for Microsoft PowerPoint 97 -->

<HTML>
<HEAD>

<meta name="GENERATOR" content="Microsoft Internet Assistant for Microsoft PowerPoint 97">
 <TITLE>Example - Real Cache</TITLE> 
</HEAD>

<BODY     >

<CENTER>
<TABLE WIDTH=100%> 
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <A HREF="sld001.htm">First</A>&nbsp;&nbsp;
         <A HREF="sld040.htm">Previous</A>&nbsp;&nbsp;
         <A HREF="sld042.htm">Next</A>&nbsp;&nbsp;
         <A HREF="sld077.htm">Last</A>&nbsp;&nbsp;
&nbsp;&nbsp;         <A HREF="index.htm">Index</A>&nbsp;&nbsp;
         <A HREF="tsld041.htm">Text</A>&nbsp;&nbsp;
     </TD> </TR>
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <IMG SRC="img041.gif" usemap="#Objmap" WIDTH=600 HEIGHT=450 BORDER=0>
     </TD> </TR>
</TABLE>
<P>Slide 41 of 77</P>
</CENTER>
<!-- <UL>
<H2>Example - Real Cache</H2>
</UL></P>
<P><UL>
<LI><H2>Unfortunately, a real cache is generally more complicated, requiring the ns_cond command as well:</H2>
</UL></P>
<P><UL>
proc cache.get {key} {
</UL><UL>
  set lock [nsv_get cache lock]; set cond [nsv_get cache cond]
</UL><UL>
  ns_mutex lock $lock
</UL><UL>
  if ![nsv_exists cache $key] {
</UL><UL>
    nsv_set cache $key “”
</UL><UL>
    ns_mutex unlock $lock
</UL><UL>
    set value [… fetch data for $key …]
</UL><UL>
    ns_mutex lock $lock
</UL><UL>
    nsv_set cache $key $value
</UL><UL>
    ns_cond broadcast $cond
</UL><UL>
  } else {
</UL><UL>
    while {[set value [nsv_get cache $key]] == “”} {
</UL><UL>
        ns_cond wait $cond $lock
</UL><UL>
    }
</UL><UL>
  }
</UL><UL>
  ns_mutex unlock $lock
</UL><UL>
  return $value
</UL><UL>
}</UL></P>
<P>  -->
</Body>
</HTML>
