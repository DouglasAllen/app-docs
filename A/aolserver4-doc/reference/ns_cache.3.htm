<!-- Creator     : groff version 1.21 -->
<!-- CreationDate: Sat May  5 10:27:38 2012 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p       { margin-top: 0; margin-bottom: 0; vertical-align: top }
       pre     { margin-top: 0; margin-bottom: 0; vertical-align: top }
       table   { margin-top: 0; margin-bottom: 0; vertical-align: top }
       h1      { text-align: center }
</style>
<title>ns_cache</title>

</head>
<body>

<h1 align="center">ns_cache</h1>

<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#CACHE TYPES">CACHE TYPES</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>

<hr>


<p>1&rsquo;</p>


<p style="margin-top: 1em">______________________________________________________________________________</p>

<h2>NAME
<a name="NAME"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">ns_cache
&minus; Cache arbitrary data</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em"><b>ns_cache
append</b> <i>cachename key string ?string ...?</i> <b><br>
ns_cache create</b> <i>cachename</i> ?<b>-size</b>
<i>maxsize</i>? ?<b>-timeout</b> <i>timeout</i>?
?<b>-thread</b> <i>thread</i>? <b><br>
ns_cache eval</b> <i>cachename key script</i> <b><br>
ns_cache flush</b> <i>cachename key</i> <b><br>
ns_cache get</b> <i>cachename key</i> ?<i>varname</i>?
<b><br>
ns_cache incr</b> <i>cachename key ?value?</i> <b><br>
ns_cache lappend</b> <i>cachename key string ?string
...?</i> <b><br>
ns_cache names</b> <i>cachename ?pattern?</i> <b><br>
ns_cache set</b> <i>cachename key string</i>
_________________________________________________________________</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">AOLserver
implements a C API for caching arbitrary data. This module
provides a Tcl API on top of the C API. A cache, in this
context, is simply a dictionary that maps keys to values.
Keys are always stored as NUL-terminated strings. How values
are stored depends on the type of cache. <b><br>
ns_cache create</b> <i>cachename</i> ?<b>-size</b>
<i>maxsize</i>? ?<b>-timeout</b> <i>timeout</i>?
?<b>-thread</b> <i><br>
thread</i>?</p>

<p style="margin-left:22%;">This command creates a new
cache named <i>cachename</i>. If -thread is given and is
true, then it is a thread-private cache. Otherwise it is a
global cache. If <i>maxsize</i> is given, then it is a
sized-based cache. If <i>timeout</i> is given, then it is a
timeout-based cache. Otherwise, it is a timeout-based cache
with an infinite timeout, meaning it will never be
flushed.</p>

<p style="margin-left:22%; margin-top: 1em">This command
returns nothing if it is successful.</p>

<p style="margin-left:11%;"><b>ns_cache eval</b>
<i>cachename key script</i></p>

<p style="margin-left:22%;">This command atomically sets
and gets a cache value. First, it looks up key in the cache
named cachename. If it finds an entry, it returns the value
of that entry. Otherwise, it executes script, stores the
return value in the cache, and also returns that value.</p>

<p style="margin-left:22%; margin-top: 1em">Script may
optionally use the return command to return its value. For
example, this will store the value &quot;2&quot; in mycache,
if mykey is not already present:</p>

<p style="margin-left:22%; margin-top: 1em">ns_cache eval
mycache mykey { expr {1+1} }</p>

<p style="margin-left:22%; margin-top: 1em">This will also
store the value &quot;2&quot; in mycache:</p>

<p style="margin-left:22%; margin-top: 1em">ns_cache eval
mycache mykey { return [expr {1+1}] }</p>

<p style="margin-left:22%; margin-top: 1em">If
<i>script</i> raises an error, or exits with break or
continue, then ns_cache eval simply returns the same
condition without modifying the cache.</p>

<p style="margin-left:11%;"><b>ns_cache flush</b>
<i>cachename key</i></p>

<p style="margin-left:22%;">This command removes the entry
for <i>key</i> from the cache named <i>cachename</i>. If the
cache has no entry for <i>key</i>, then nothing happens.</p>

<p style="margin-left:22%; margin-top: 1em">For global
caches, <b>ns_cache flush</b> interacts with <b>ns_cache
eval</b>. Suppose thread 1 has called get_thing A and is
executing the long operation to compute the value for A.
Thread 2 calls <b>get_thing A</b> and starts waiting for
thread 1 to finish. Thread 3 calls <b>ns_cache flush
thing_cache A</b>. Thread 1 will continue executing the long
operation, but thread 2 will also start the long operation.
When thread 1 completes the long operation, <b>ns_cache
eval</b> returns the (now stale) value it computed, but it
does <i>not</i> store the value in the cache. When thread 2
completes the long operation, <b>ns_cache eval</b> stores
the (fresh) value it computed in the cache and returns the
fresh value.</p>

<p style="margin-left:11%;"><b>ns_cache get</b>
<i>cachename key</i> ?<i>varname</i>?</p>

<p style="margin-left:22%;">This command looks up
<i>key</i> in the specified cache. It operates differently
depending on whether <i>varname</i> was given.</p>

<p style="margin-left:22%; margin-top: 1em">If
<i>varname</i> absent and the key exists the value is
returned and if the key is missing an error is raised. If
<i>varname</i> is provided and the key exists the command
sets <i>varname</i> to the value and returns 1, otherwise it
returns 0.</p>

<p style="margin-left:11%;"><b>ns_cache names</b>
<i>cachename ?pattern?</i></p>

<p style="margin-left:22%;">This command returns a list of
all keys currently in the specified cache. If <i>pattern</i>
is specified, only matching entries are returned (match
pattern syntax like in <b>string match</b>).</p>

<p style="margin-left:22%; margin-top: 1em">If the cache is
thread-private, then the list only includes keys that are in
the thread&rsquo;s private cache.</p>

<p style="margin-left:11%;"><b>ns_cache set</b>
<i>cachename key value</i></p>

<p style="margin-left:22%;">This command stores value for
key in the specified cache.</p>

<h2>CACHE TYPES
<a name="CACHE TYPES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">ns_cache
supports three types of caches:</p>

<p style="margin-left:11%; margin-top: 1em"><b>Global
Size-Limited Cache</b></p>

<p style="margin-left:11%; margin-top: 1em">ns_cache create
cachename -size maxsize</p>

<p style="margin-left:11%; margin-top: 1em">Entries in a
cache of this type are accessible to all threads. Each cache
has its own mutex that protects access to its entries.</p>

<p style="margin-left:11%; margin-top: 1em">Cache values
are stored as counted strings, so arbitrary binary data can
be cached. A global cache stores strings instead of Tcl
objects to prevent race conditions that could lead to heap
corruption.</p>

<p style="margin-left:11%; margin-top: 1em">The cache has a
maximum size specified when the cache is created. The size
of the cache is the sum of the sizes of all the values in
the cache; keys do not count toward a cache&rsquo;s size. If
inserting a value into the cache makes the cache&rsquo;s
size exceed its maximum, then cache entries are evicted
starting with the least-recently used entry until the size
is below the maximum size (or until only the new value
remains in the cache).</p>

<p style="margin-left:11%; margin-top: 1em"><b>Global
Time-Limited Cache</b></p>

<p style="margin-left:11%; margin-top: 1em">ns_cache create
cachename -timeout timeout</p>

<p style="margin-left:11%; margin-top: 1em">Entries in a
cache of this type are accessible to all threads. Each cache
has its own mutex that protects access to its entries.</p>

<p style="margin-left:11%; margin-top: 1em">Cache values
are stored as counted strings, as in a global size-limited
cache.</p>

<p style="margin-left:11%; margin-top: 1em">The cache has a
maximum entry lifetime, called its <i>timeout</i>, specified
(in seconds) when the cache is created. Every <i>timeout</i>
seconds, AOLserver flushes all cache entries that have not
were not created or accessed in the last <i>timeout</i>
seconds.</p>


<p style="margin-left:11%; margin-top: 1em"><b>Thread-Private
Size-Limited Cache</b></p>

<p style="margin-left:11%; margin-top: 1em">ns_cache create
cachename -size maxsize -thread 1</p>

<p style="margin-left:11%; margin-top: 1em">Each thread in
AOLserver automatically gets its own private cache named
<i>cachename</i>. Since a thread-private cache is only
accessed by one thread, access to it does not require a
mutex. Entries in one thread&rsquo;s cache are not visible
to any other thread.</p>

<p style="margin-left:11%; margin-top: 1em">Cache values
are stored as Tcl objects. When a value is stored in the
cache, nscache computes its string form and uses the length
of the string as the size of the value.</p>

<p style="margin-left:11%; margin-top: 1em">The cache has a
maximum size, like a global size-limited cache. However,
because of the way the cache value sizes are computed, the
actual memory usage of the cache values may be several times
larger than <i>maxsize</i>.</p>

<p style="margin-left:11%; margin-top: 1em">Thread-private
caches may offer higher performance if the cached values are
complex objects such as lists or scripts, but require more
storage than global caches.</p>

<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Ns_Cache(3),
nsv(n)</p>
<hr>
</body>
</html>
