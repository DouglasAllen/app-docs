<!-- Creator     : groff version 1.21 -->
<!-- CreationDate: Sat May  5 10:27:40 2012 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p       { margin-top: 0; margin-bottom: 0; vertical-align: top }
       pre     { margin-top: 0; margin-bottom: 0; vertical-align: top }
       table   { margin-top: 0; margin-bottom: 0; vertical-align: top }
       h1      { text-align: center }
</style>
<title>ns_filter</title>

</head>
<body>

<h1 align="center">ns_filter</h1>

<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>
<a href="#KEYWORDS">KEYWORDS</a><br>

<hr>



<p style="margin-top: 1em">______________________________________________________________________________</p>

<h2>NAME
<a name="NAME"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em">ns_register_filter,
ns_register_proc, ns_register_trace &minus; Register a
filter, proc or trace callback</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>ns_register_filter</b>
<i>option</i> ?<i>arg arg ...</i>?</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_register_proc</b>
<i>option</i> ?<i>arg arg ...</i>?</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_register_trace</b>
<i>option</i> ?<i>arg arg ...</i>?
_________________________________________________________________</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>ns_register_filter:</b>
<br>
Registers a Tcl filter script for the specified method/URL
combination on a virtual server. The script can be called at
one or more of three given times: pre-authorization,
post-authorization before page data has been returned to the
user, and after the connection has been processed and
closed.</p>

<p style="margin-left:11%; margin-top: 1em">This function
will be called at the specified stage of a connection, if
the method/URL combination for the filter matches the
method/URL combination for the connection using glob style
matching.</p>

<p style="margin-left:11%; margin-top: 1em">The URLpattern
can contain standard string-matching characters. For
example, these are valid URL patterns:</p>


<p style="margin-left:11%; margin-top: 1em">/employees/*.tcl
/accounts/*/out</p>

<p style="margin-left:11%; margin-top: 1em">Valid values
for the &quot;when&quot; argument are: preauth, postauth,
and trace. Using pre-authorization, the procedure will be
called (assuming that the method/URL combination matches)
just before authorization. If the procedure returns with a
code of:</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p><b>TCL_OK</b></p></td>
<td width="3%"></td>
<td width="71%">


<p>(using: return &quot;filter_ok&quot;): The server will
continue to the next pre-authorization filter for this
connection, or, if there are no more pre-authorization
filters, it will continue on with authorization.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p><b>TCL_BREAK</b></p></td>
<td width="3%"></td>
<td width="71%">


<p>(using: return &quot;filter_break&quot;): The server
will not process any more pre-authorization filters for this
connection, and it will continue on with authorization.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p><b>TCL_RETURN</b></p></td>
<td width="3%"></td>
<td width="71%">


<p>(using: return &quot;filter_return&quot;): The server
will close the connection and will not run any more
pre-authorization filters. It will not authorize the
request, and it will not run the function registered for
this METHOD/URL. It WILL run any trace functions registered
for this METHOD/URL, usually including logging. It is
assumed that the filter has sent a proper response (e.g.,
using ns_return) to the client before returning
TCL_RETURN.</p> </td></tr>
</table>

<p style="margin-left:11%;">Using post-authorization, the
procedure will be called (assuming that <br>
the method/URL combination matches) just after successful
<br>
authorization. If the procedure returns:</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p><b>TCL_OK</b></p></td>
<td width="3%"></td>
<td width="71%">


<p>(using: return &quot;filter_ok&quot;): The server will
continue to the next post-authorization filter for this
connection, or, if there are no more post-authorization
filters, it will run the function registered to handle this
request.</p> </td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p><b>TCL_BREAK</b></p></td>
<td width="3%"></td>
<td width="71%">


<p>(using: return &quot;filter_break&quot;): The server
will not process any more post-authorization filters for
this connection, and it will run the function registered to
handle this request.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p><b>TCL_RETURN</b></p></td>
<td width="3%"></td>
<td width="71%">


<p>(using: return &quot;filter_return&quot;): The server
will close the connection and will not run any more
post-authorization filters and it will not run the function
registered for this METHOD/URL. It WILL run any trace
functions registered for this METHOD/URL, usually including
logging. It is assumed that the filter has returned a proper
response (e.g., using ns_return) to the client before
returning TCL_RETURN.</p></td></tr>
</table>

<p style="margin-left:11%;">Using trace, the procedure will
be called (assuming that the method/URL <br>
combination match) after the connection has been totally
processed and <br>
closed. If the procedure returns:</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p><b>TCL_OK</b></p></td>
<td width="3%"></td>
<td width="71%">


<p>(using: return &quot;filter_ok&quot;): The server will
continue to the next trace filter.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p><b>TCL_BREAK</b></p></td>
<td width="3%"></td>
<td width="71%">


<p>(using: return &quot;filter_break&quot;): The rest of
the trace filters are ignored.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p><b>TCL_RETURN</b></p></td>
<td width="3%"></td>
<td width="71%">


<p>(using: return &quot;filter_break&quot;): The rest of
the trace filters are ignored.</p></td></tr>
</table>

<p style="margin-left:11%; margin-top: 1em"><b>Syntax for
the registered procedure:</b></p>

<p style="margin-left:11%; margin-top: 1em">The conn
(connection) argument is optional for procedures registered
by ns_register_filter if the procedure has 1 or 2 arguments
(including why but not including conn). The following
examples show the variations that can be used in this
case:</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_register_filter</b>
<i>trace</i> GET /noargs filter_noargs <b><br>
ns_register_filter</b> <i>trace</i> GET /context
filter_context fnord <b><br>
ns_register_filter</b> <i>trace</i> GET /conncontext
filter_conncontext</p>

<p style="margin-left:11%; margin-top: 1em">proc
filter_noargs { why } { <br>
ns_log Notice &quot;filter noargs&quot; <br>
return filter_ok <br>
} ;# filter_noargs</p>

<p style="margin-left:11%; margin-top: 1em">proc
filter_context { arg why } { <br>
ns_log Notice &quot;filter context. Arg: $arg&quot; <br>
return filter_ok <br>
} ;# filter_noargs</p>

<p style="margin-left:11%; margin-top: 1em">proc
filter_conncontext { conn arg why } { <br>
ns_log Notice &quot;filter conn context&quot; <br>
return filter_ok <br>
} ;# filter_noargs</p>

<p style="margin-left:11%; margin-top: 1em">The conn
(connection) argument is required for procedures registered
by ns_register_filter if the procedure has 3 or more
arguments (including why but not including conn). The conn
argument is automatically filled with the connection
information. The first argument following conn will always
take the value supplied by ns_register_filter, if there is
one, or an empty value. The why argument at the end is
automatically filled with the type of filter requested. All
other arguments must supply a default value. The following
examples show the variations that can be used in this
case:</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_register_filter</b>
<i>postauth</i> GET /threeargs threeargs aaa <b><br>
ns_register_filter</b> <i>postauth</i> GET /fourargs
fourargs aaa bbb ccc</p>

<p style="margin-left:11%; margin-top: 1em">proc threeargs
{ conn context { greeble bork } why } { <br>
... <br>
} ;</p>

<p style="margin-left:11%; margin-top: 1em">proc fourargs {
conn context { greeble bork } {hoover quark} why } { <br>
... <br>
} ;</p>

<p style="margin-left:11%; margin-top: 1em">When a GET of
/threeargs is requested, the conn and why arguments will be
filled automatically, the context argument will be assigned
&quot;aaa&quot; and the greeble argument will be assigned
the default value &quot;bork&quot;. When a GET of /fourargs
is requested, the conn and why arguments will be filled
automatically, the context argument will be assigned
&quot;aaa&quot;, the greeble argument will be assigned
&quot;bbb&quot;, and the hoover argument will be assigned
the default value &quot;quark&quot;.</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_register_trace:</b>
<br>
Register a Tcl trace script to a method and matching URL.
(Note: This function is obsolete. Use
<b>ns_register_filter</b> instead.)</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_register_trace</b>
registers a Tcl script as a trace for the specified
method/URL combination. After the server handles the request
for the specified method on an URL that matches the
<i>URLpattern</i>, it calls the trace script with the
connection id and any arguments (args) specified. The
<i>URLpattern</i> can contain standard string-matching
characters. For example, these are valid URLpatterns:</p>


<p style="margin-left:11%; margin-top: 1em">/employees/*.tcl
/accounts/*/out</p>

<p style="margin-left:11%; margin-top: 1em">Note
<b>ns_register_trace</b> is similar to
<b>ns_register_proc</b> except that the pattern-matching for
the URL is performed differently. With
<b>ns_register_proc</b>, the specified URL is used to match
that URL and any URL below it in the hierarchy. Wildcards
such as &quot;*&quot; are meaningful only for the final part
of the URL, such as /scripts/*.tcl. With
<b>ns_register_trace</b>, the <i>URLpattern</i> is used to
match URLs as a string with standard string-matching
characters. <b>ns_register_proc</b> results in a single
match, whereas multiple ns_register_trace&rsquo;s can be
matched and will be called.</p>

<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em">ns_register_proc(n),
ns_register_tag(n), ns_register_adptag(n)</p>

<h2>KEYWORDS
<a name="KEYWORDS"></a>
</h2>
<hr>
</body>
</html>
