<!-- Creator     : groff version 1.21 -->
<!-- CreationDate: Sat May  5 10:27:23 2012 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p       { margin-top: 0; margin-bottom: 0; vertical-align: top }
       pre     { margin-top: 0; margin-bottom: 0; vertical-align: top }
       table   { margin-top: 0; margin-bottom: 0; vertical-align: top }
       h1      { text-align: center }
</style>
<title>Ns_Exec</title>

</head>
<body>

<h1 align="center">Ns_Exec</h1>

<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>
<a href="#KEYWORDS">KEYWORDS</a><br>

<hr>



<p style="margin-top: 1em">______________________________________________________________________________</p>

<h2>NAME
<a name="NAME"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Ns_ExecArgblk,
Ns_ExecArgv, Ns_ExecProc, Ns_ExecProcess, Ns_Fork,
Ns_GetEnviron, Ns_WaitForProcess, Ns_WaitProcess, ns_fork
&minus; External process execution</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em"><b>#include
&quot;ns.h&quot;</b></p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_ExecArgblk</b>(<i>char *exec, char *dir, int fdin, int
fdout, <br>
char *args, Ns_Set *env</i>)</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_ExecArgv</b>(<i>char *exec, char *dir, int fdin, int
fdout, <br>
char **argv, Ns_Set *env</i>)</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_ExecProc</b>(<i>char *exec, char **argv</i>)</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_ExecProcess</b>(<i>char *exec, char *dir, int fdin, int
fdout,</i></p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="8%"></td>
<td width="7%">
</td>
<td width="8%">
</td>
<td width="8%">
</td>
<td width="69%">


<p><i>char *args, Ns_Set *env</i>)</p></td></tr>
</table>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_Fork</b>(<i>void</i>)</p>

<p style="margin-left:11%; margin-top: 1em">char <b><br>
**Ns_GetEnviron</b>(<i>void</i>)</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_WaitForProcess</b>(<i>int pid, int *statusPtr</i>)</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_WaitProcess</b>(<i>int pid</i>)</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
ns_fork</b>(<i>void</i>)
_________________________________________________________________</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">These functions
handle fork and exec operations. See files: nsd/exec.c,
nsd/tclenv.c and nsthread/fork.c. <b><br>
Ns_ExecArgblk</b>(<i>exec, dir, fdin, fdout, args,
env</i>)</p>

<p style="margin-left:22%; margin-top: 1em">Executes a
command in a child process. Return process id of child
process exec&acute;ing the command or &minus;1 on failure.
Provides extended error checking and error messages.</p>

<p style="margin-left:11%;"><b>Ns_ExecArgv</b>(<i>exec,
dir, fdin, fdout, argv, env</i>)</p>

<p style="margin-left:22%; margin-top: 1em">Execute a
command in a child process using fork(2) and execve(2),
returns the process id of child process exec&acute;ing the
command or &minus;1 on failure. The child sends an extended
error message to the parent.</p>

<p style="margin-left:11%;"><b>Ns_ExecProc</b>(<i>exec,
argv</i>)</p>

<p style="margin-left:22%; margin-top: 1em">Executes a
command in a child process. Returns the process id of the
child process exec&acute;ing the command or &minus;1 on
failure. Simplifies call to Ns_ExecArgv.</p>

<p style="margin-left:11%;"><b>Ns_ExecProcess</b>(<i>exec,
dir, fdin, fdout, args, env</i>)</p>

<p style="margin-left:22%; margin-top: 1em">Executes a
command in a child process. Returns the process id of the
child process exec&acute;ing the command or &minus;1 on
failure. Calls Ns_ExecArgblk with same arguments.</p>

<p style="margin-left:11%;"><b>Ns_Fork</b>()</p>

<p style="margin-left:22%;">Posix style fork(), using
fork1() on Solaris if needed. See fork(2) man page. Calls
ns_fork.</p>

<p style="margin-left:11%;"><b>Ns_GetEnviron</b>()</p>

<p style="margin-left:22%; margin-top: 1em">Returns pointer
to the environment vector.</p>


<p style="margin-left:11%;"><b>Ns_WaitForProcess</b>(<i>pid,
statusPtr</i>)</p>

<p style="margin-left:22%; margin-top: 1em">Wait for child
process. Returns NS_OK on success, or NS_ERROR on failure.
*statusPtr is set to the exit code of the child process.</p>


<p style="margin-left:11%;"><b>Ns_WaitProcess</b>(<i>pid</i>)</p>

<p style="margin-left:22%; margin-top: 1em">Wait for child
process. Calls Ns_WaitForProcess with NULL statusPtr.
Returns NS_OK on success, or NS_ERROR on failure.</p>

<p style="margin-left:11%;"><b>ns_fork</b>()</p>

<p style="margin-left:22%; margin-top: 1em">Posix style
fork(), using fork1() on Solaris if needed.</p>

<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">nsd(1),
info(n)</p>

<h2>KEYWORDS
<a name="KEYWORDS"></a>
</h2>
<hr>
</body>
</html>
