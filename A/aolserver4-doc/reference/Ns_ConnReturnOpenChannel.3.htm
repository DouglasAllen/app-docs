<!-- Creator     : groff version 1.21 -->
<!-- CreationDate: Sat May  5 10:27:19 2012 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p       { margin-top: 0; margin-bottom: 0; vertical-align: top }
       pre     { margin-top: 0; margin-bottom: 0; vertical-align: top }
       table   { margin-top: 0; margin-bottom: 0; vertical-align: top }
       h1      { text-align: center }
</style>
<title>Ns_ConnReturnOpen</title>

</head>
<body>

<h1 align="center">Ns_ConnReturnOpen</h1>

<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#ARGUMENTS">ARGUMENTS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#NOTES">NOTES</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>
<a href="#KEYWORDS">KEYWORDS</a><br>

<hr>



<p style="margin-top: 1em">______________________________________________________________________________</p>

<h2>NAME
<a name="NAME"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em">Ns_ConnReturnOpenChannel,
Ns_ConnReturnOpenFd, Ns_ConnReturnFdEx,
Ns_ConnReturnOpenFile &minus; Routines to send open file
content</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em"><b>#include
&quot;ns.h&quot;</b> <br>
int</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_ConnReturnOpenChannel</b>(<i>conn, status, type, chan,
len</i>)</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_ConnReturnOpenFd</b>(<i>conn, status, type, fd,
len</i>)</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_ConnReturnOpenFdex</b>(<i>conn, status, type, fd, off,
len</i>)</p>

<p style="margin-left:11%; margin-top: 1em">int <b><br>
Ns_ConnReturnOpenFile</b>(<i>conn, status, type, fp,
len</i>)</p>

<h2>ARGUMENTS
<a name="ARGUMENTS"></a>
</h2>


<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="40%">


<p style="margin-top: 1em">Tcl_Channel <i>chan</i> (in)</p></td>
<td width="7%"></td>
<td width="42%">


<p style="margin-top: 1em">Pointer to Tcl_Channel open for
read.</p> </td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="40%">


<p>Ns_Conn <i>conn</i> (in)</p></td>
<td width="7%"></td>
<td width="42%">


<p>Pointer to open connection.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="40%">


<p>FILE <i>*fp</i> (in)</p></td>
<td width="7%"></td>
<td width="42%">


<p>Pointer to stdio FILE open for read.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="40%">


<p>off_t <i>off</i> (in)</p></td>
<td width="7%"></td>
<td width="42%">


<p>Seek offset.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="40%">


<p>int <i>fd</i> (int)</p></td>
<td width="7%"></td>
<td width="42%">


<p>File descriptor open for read.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="40%">


<p>int <i>status</i> (in)</p></td>
<td width="7%"></td>
<td width="42%">


<p>HTTP status code.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="40%">


<p>char <i>*type</i> (in)</p></td>
<td width="7%"></td>
<td width="42%">


<p>Pointer to mimetype string.</p></td></tr>
</table>


<p style="margin-left:58%;">_________________________________________________________________</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">These routines
are used to generate complete responses, including headers,
status codes, content types, and the content copied from the
given open file. They all return a status code which is
NS_OK if the response was sent or NS_ERROR if an underlying
call to sent the content failed. The response will include
the given HTTP <i>status</i> code, a <i>content-type</i>
header with the given <i>type</i>, and a
<i>content-length</i> header with the length specified by
<i>len</i>. No character output encoding or gzip compression
is performed on the content.</p>

<p style="margin-left:11%; margin-top: 1em">For
<b>Ns_ConnReturnOpenFdEx</b>, copying begins at the offset
specified by the <i>off</i> argument Otherwise, these
routines copy from the current read offset in the underlying
open file. No attempt is made to serialize access to the
underlying object so independent open file objects and/or
mutex locking is necessary if the same file is being sent
simultaneously to multiple clients.</p>

<h2>NOTES
<a name="NOTES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Windows
Support</p>

<p style="margin-left:22%;">The
<b>Ns_ConnReturnOpenFdEx</b> routine is not currently
supported on Windows. When called on Windows, it will always
return NS_ERROR.</p>

<p style="margin-left:11%;">Truncated Result</p>

<p style="margin-left:22%;">The server will construct a
<i>content-length</i> header based on the given <i>len</i>
argument. However, the server will send the content with an
underlying call to a cooresponding <b>Ns_ConnSend</b>
function, e.g., <b>Ns_ConnSendFd</b> for
<b>Ns_ConnReturnOpenFd</b>. These functions will send the
requested content or all remaining content in the open file
if less bytes are avilable without reporting an error due to
the truncated response. As the headers will have already
been flushed before sending the content in this case, the
<i>content-length</i> header will not be consistent with the
actual bytes sent. If it is not possible to ensure the
remaining bytes will be equal or greater to the requested
bytes to send, it is possible to specify -1 for <i>len</i>
to supress the <i>content-length</i> header entirely. Most
browsers will accept this resonse and simply calculate the
length from the bytes receieved up until the socket is
closed.</p>

<p style="margin-left:11%;">Performance Consideration</p>

<p style="margin-left:22%;">As mentioned, these routines
use underlying <b>Ns_ConnSendFd</b> style routines to copy
and send the content from open files. This is not the
approach used by the builtin file-serving code (aka the
&quot;fastpath&quot;). The fastpath operates with filenames,
not open file objects, and maintains a cached of pre-read or
memory mapped regions to accelerate the common case of
rapidly sending reasonably sized content to multiple,
simultaneous clients. The <b>Ns_ConnReturnFile</b> routine
utilizes the underlying fastpath and thus could be a faster
means to send static files than directly opening files and
calling these API&rsquo;s.</p>

<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em">Ns_ConnReturnFile(3),
Ns_ConnFlush(3), Ns_ConnSendFd(3), Ns_ConnReturnData(3)</p>

<h2>KEYWORDS
<a name="KEYWORDS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">connnection,
response, file</p>
<hr>
</body>
</html>
