<!-- Creator     : groff version 1.21 -->
<!-- CreationDate: Sat May  5 10:27:46 2012 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p       { margin-top: 0; margin-bottom: 0; vertical-align: top }
       pre     { margin-top: 0; margin-bottom: 0; vertical-align: top }
       table   { margin-top: 0; margin-bottom: 0; vertical-align: top }
       h1      { text-align: center }
</style>
<title>ns_sched</title>

</head>
<body>

<h1 align="center">ns_sched</h1>

<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#EXAMPLES">EXAMPLES</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>
<a href="#KEYWORDS">KEYWORDS</a><br>

<hr>



<p style="margin-top: 1em">______________________________________________________________________________</p>

<h2>NAME
<a name="NAME"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">ns_after,
ns_cancel, ns_pause, ns_resume, ns_schedule_daily,
ns_schedule_proc, ns_schedule_weekly, ns_unschedule_proc
&minus; commands</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>ns_after</b>
<i>seconds {script | procname ?args?}</i></p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_cancel</b>
<i>id</i></p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_pause</b>
<i>id</i></p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_resume</b>
<i>id</i></p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_schedule_daily</b>
?-thread? ?-once? <i>hour minute {script | procname
?args?}</i></p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_schedule_proc</b>
?-thread? ?-once? <i>interval {script | procname
?args?}</i></p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_schedule_weekly</b>
?-thread? ?-once? <i>day hour minute {script | procname
?args?}</i></p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_unschedule_proc</b>
<i>id</i>
_________________________________________________________________</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>ns_after</b></p>

<p style="margin-left:22%;">run the specified script or
procedure after the specified number of seconds</p>

<p style="margin-left:22%; margin-top: 1em">ns_after
returns an id which can be used with the ns_pause, ns_cancel
and ns_resume apis.</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_cancel</b></p>

<p style="margin-left:22%;">stops the scheduled running of
the id returned by an ns_after</p>

<p style="margin-left:22%; margin-top: 1em">returns 1 if
unscheduled 0 if the script of procedure couldn&rsquo;t be
unscheduled</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_pause</b></p>

<p style="margin-left:22%;">pauses the scheduled running of
the id returned by an ns_after</p>

<p style="margin-left:22%; margin-top: 1em">returns 1 if
paused, 0 if the script of procedure couldn&rsquo;t be
paused</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_resume</b></p>

<p style="margin-left:22%;">resumes the scheduled running
of the id returned by an ns_after</p>

<p style="margin-left:22%; margin-top: 1em">returns 1 if
resumed, 0 if the script of procedure couldn&rsquo;t be
resumed</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_schedule_daily</b></p>

<p style="margin-left:22%;">ns_schedule_daily runs the
specified Tcl script or procedure (procname) once a day at
the time specified by hour and minute. The hour can be from
0 to 23, and the minute can be from 0 to 59.</p>

<p style="margin-left:22%; margin-top: 1em">Specify -thread
if you want a thread created to run the procedure. This will
allow the scheduler to continue with other scheduled
procedures. Specifying -thread is appropriate in situations
where the script will not return immediately, such as when
the script performs network activity.</p>

<p style="margin-left:22%; margin-top: 1em">Specify -once
if you want the script to run only one time. The default is
that the script will be re-scheduled after each time it is
run.</p>


<p style="margin-left:22%; margin-top: 1em">ns_schedule_daily
returns an id number for the scheduled procedure that is
needed to stop the scheduled procedure with
ns_unschedule_proc.</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_schedule_proc</b></p>

<p style="margin-left:22%;">ns_schedule_proc runs the
specified Tcl script or procedure (procname) at an interval
specified by interval. The interval is the number of seconds
between runs of the script.</p>

<p style="margin-left:22%; margin-top: 1em">Specify -thread
if you want a thread created to run the procedure. This will
allow the scheduler to continue with other scheduled
procedures. Specifying -thread is appropriate in situations
where the script will not return immediately, such as when
the script performs network activity.</p>

<p style="margin-left:22%; margin-top: 1em">Specify -once
if you want the script to run only one time. The default is
that the script will be re-scheduled after each time it is
run.</p>


<p style="margin-left:22%; margin-top: 1em">ns_schedule_proc
returns an id number for the scheduled procedure that is
needed to stop the scheduled procedure with
ns_unschedule_proc.</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_schedule_weekly</b></p>

<p style="margin-left:22%;">ns_schedule_weekly runs the
specified Tcl script or procedure (procname) once a week on
the day specified by day and the time specified by hour and
minute. The day can be from 0 to 6, where 0 represents
Sunday. The hour can be from 0 to 23, and the minute can be
from 0 to 59.</p>

<p style="margin-left:22%; margin-top: 1em">Specify -thread
if you want a thread created to run the procedure. This will
allow the scheduler to continue with other scheduled
procedures. Specifying -thread is appropriate in situations
where the script will not return immediately, such as when
the script performs network activity.</p>

<p style="margin-left:22%; margin-top: 1em">Specify -once
if you want the script to run only one time. The default is
that the script will be re-scheduled after each time it is
run.</p>


<p style="margin-left:22%; margin-top: 1em">ns_schedule_weekly
returns an id number for the scheduled procedure that is
needed to stop the scheduled procedure with
ns_unschedule_proc.</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_unschedule_proc</b>
<i>id</i></p>

<p style="margin-left:22%;">ns_unschedule_proc stops a
scheduled procedure from executing anymore. The scheduled
procedure to be stopped is identified by its id, which was
returned by the ns_schedule* function that was used to
schedule the procedure.</p>

<h2>EXAMPLES
<a name="EXAMPLES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em"><b>ns_after
ns_cancel ns_pause ns_resume</b></p>

<p style="margin-left:22%;">This example illustrates a web
interface used to manage jobs. Depending on the action
provided a job can be created, cancelled, paused or
resumed.</p>

<p style="margin-left:22%; margin-top: 1em">set action
[ns_queryget action] set job [ns_queryget job] switch
$action { <br>
create { <br>
set job [ns_after 10 [ns_queryget script]] <br>
ns_puts &quot;Job created with id: $job&quot; <br>
} <br>
cancel { <br>
if {[ns_cancel $job]} { <br>
ns_puts &quot;Job $job cancelled&quot; <br>
} else { <br>
ns_puts &quot;Job $job not cancelled&quot; <br>
} <br>
} <br>
pause { <br>
if {[ns_pause $job]} { <br>
ns_puts &quot;Job $job paused&quot; <br>
} else { <br>
ns_puts &quot;Job $job not paused <br>
} <br>
} <br>
resume { <br>
if {[ns_resume $job]} { <br>
ns_puts &quot;Job $job resumed&quot; <br>
} else { <br>
ns_puts &quot;Job $job couldn&rsquo;t be resumed&quot; <br>
} <br>
} <br>
default { <br>
ns_puts &quot;Invalid action $action&quot; <br>
} }</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_schedule_daily</b></p>

<p style="margin-left:22%;">This example defines a script
called rolllog that uses ns_accesslog to roll the access log
to a file with an extension containing the current date. The
ns_schedule_daily function is used to execute the rolllog
script on a daily basis.</p>

<p style="margin-left:22%; margin-top: 1em"># Script to
roll and rcp log file to host &quot;grinder&quot; proc
rolllog {} { <br>
set suffix [ns_strftime &quot;%y-%m-%d&quot;] <br>
set new [ns_accesslog file].$suffix <br>
ns_accesslog roll $new <br>
exec rcp $new grinder:/logs/[file tail $new] } # Schedule
&quot;rolllog&quot; to run at 3:30 am each morning
ns_schedule_daily -thread 3 30 rolllog</p>


<p style="margin-left:11%; margin-top: 1em"><b>ns_schedule_proc</b>
proc dosomething blah { <br>
ns_log Notice &quot;proc with arg &rsquo;$blah&rsquo;&quot;
} ns_schedule_proc 10 dosomething $arg1</p>

<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>


<h2>KEYWORDS
<a name="KEYWORDS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">schedule pause
resume unschedule cancel after</p>
<hr>
</body>
</html>
