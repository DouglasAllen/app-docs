<!-- Creator     : groff version 1.21 -->
<!-- CreationDate: Sat May  5 10:27:18 2012 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p       { margin-top: 0; margin-bottom: 0; vertical-align: top }
       pre     { margin-top: 0; margin-bottom: 0; vertical-align: top }
       table   { margin-top: 0; margin-bottom: 0; vertical-align: top }
       h1      { text-align: center }
</style>
<title>Ns_ConnGetQuery</title>

</head>
<body>

<h1 align="center">Ns_ConnGetQuery</h1>

<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#ARGUMENTS">ARGUMENTS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#EXAMPLE">EXAMPLE</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>
<a href="#KEYWORDS">KEYWORDS</a><br>

<hr>



<p style="margin-top: 1em">______________________________________________________________________________</p>

<h2>NAME
<a name="NAME"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em">Ns_ConnGetQuery,
Ns_ConnClearQuery, Ns_ConnGetFile, Ns_ConnFirstFile,
Ns_ConnNextFile &minus; Routines to access query data
included with a connection request</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em"><b>#include
&quot;ns.h&quot;</b></p>

<p style="margin-left:11%; margin-top: 1em">Ns_Set *
<b><br>
Ns_ConnGetQuery</b>(<i>Ns_Conn *conn</i>)</p>

<p style="margin-left:11%; margin-top: 1em">void <b><br>
Ns_ConnClearQuery</b>(<i>Ns_Conn *conn</i>)</p>

<p style="margin-left:11%; margin-top: 1em">Ns_ConnFile *
<b><br>
Ns_ConnGetFile</b>(<i>Ns_Conn *conn, char *file</i>)</p>

<p style="margin-left:11%; margin-top: 1em">Ns_ConnFile *
<b><br>
Ns_ConnFirstFile</b>(<i>Ns_Conn *conn, Tcl_HashSearch
*searchPtr</i>)</p>

<p style="margin-left:11%; margin-top: 1em">Ns_ConnFile *
<b><br>
Ns_ConnNextFile</b>(<i>Ns_Conn *conn, Tcl_HashSearch
*searchPtr</i>)</p>

<h2>ARGUMENTS
<a name="ARGUMENTS"></a>
</h2>


<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="58%">


<p style="margin-top: 1em">Ns_Conn <i>*conn</i> (in)</p></td>
<td width="3%"></td>
<td width="28%">


<p style="margin-top: 1em">Pointer to given connection.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="58%">


<p>char <i>*file</i> (in)</p></td>
<td width="3%"></td>
<td width="28%">


<p>Name of embedded file.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="58%">


<p>Tcl_HashSearch <i>*searchPtr</i> (in/out)</p></td>
<td width="3%"></td>
<td width="28%">


<p>Pointer to buffer to maintain state of an active
search.</p> </td></tr>
</table>


<p style="margin-left:72%;">_________________________________________________________________</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">These routines
provide access to connection query data, derived from either
URL query arguments (i.e., key/value pairs after the
<i>?</i> in an URL) or via an HTTP POST. The server supports
ordinary URL encoded forms as well as
<i>multipart/form-data</i> forms which may include one or
more embedded files.</p>

<p style="margin-left:11%; margin-top: 1em">As form
processing is a common and important aspect of dynamic web
applications, AOLserver provides easy access to the query
data within the core. The parsing occurs on demand and the
results are cached for reuse throughout the connection;
there is no need to copy the returned <i>Ns_Set</i> or
<i>Ns_ConnFile</i> structure(s). The results of these
routines should be considered read-only. <br>
Ns_Set *<b>Ns_ConnGetQuery</b>(<i>conn</i>)</p>

<p style="margin-left:22%;">Returns a pointer to an
<i>Ns_Set</i> with the fields of the connection query or
<i>NULL</i> if no valid query was present. The keys and
values are in UTF-8, decoded from the request based on the
server <i>urlencoding</i> config option. Subsequent calls to
<b>Ns_ConnGetQuery</b> will return the same set unless the
server detects the connection encoding has changed in which
case the previous query is cleared and a new query result is
generated.</p>

<p style="margin-left:22%; margin-top: 1em">Data for the
query is based on any URL query arguments which may be
present (i.e., key/value pairs following the <i>?</i> in the
URL). If there is no URL query data, the server will parse
the content of an HTTP <b>POST</b><i>.</i></p>

<p style="margin-left:11%;"><i>void</i>
<b>Ns_ConnClearQuery</b>(<i>conn</i>)</p>

<p style="margin-left:22%;">Frees the previous parsed
query, if any. There is normally no need to call this
routine as it is called automatically at the end of a
connection if necessary. It is normally only called
internally when <b>Ns_ConnGetQuery</b> <i>detects the url
encoding has been manually updated for the connection,
potentially invalidating the character encoding on the
previous form parsing.</i></p>

<p style="margin-left:11%; margin-top: 1em">Ns_ConnFile
*<b>Ns_ConnGetFile</b>(<i>file</i>) Returns the
<i>Ns_ConnFile</i> structure for the given file if present
which includes the following fields:</p>

<p style="margin-left:22%; margin-top: 1em">typedef struct
Ns_ConnFile {</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="3%"></td>
<td width="5%"></td>
<td width="92%">


<p>char *name;</p></td></tr>
<tr valign="top" align="left">
<td width="3%"></td>
<td width="5%"></td>
<td width="92%">


<p>Ns_Set *headers;</p></td></tr>
<tr valign="top" align="left">
<td width="3%"></td>
<td width="5%"></td>
<td width="92%">


<p>off_t offset;</p></td></tr>
<tr valign="top" align="left">
<td width="3%"></td>
<td width="5%"></td>
<td width="92%">


<p>off_t length;</p></td></tr>
<tr valign="top" align="left">
<td width="3%"></td>
<td width="5%"></td>
<td width="92%">


<p>} Ns_ConnFile;</p></td></tr>
</table>

<p style="margin-left:11%; margin-top: 1em">The <i>name</i>
field is a pointer to a string which matches the name as
provided by the corresponding form <i>&lt;input&gt;</i> tag.
The <i>headers</i> field is a pointer to an <i>Ns_Set</i>
with the key/value pairs for the file input meta data, e.g.,
a <i>Content-Type</i> header. The <i>offset</i> and
<i>length</i> fields specfy where within the content the
actual file bytes are located. See the <b>Ns_ConnContent</b>
man page for details on accessing the content bytes either
through an in-memory buffer or open temp file.</p>


<p style="margin-left:11%; margin-top: 1em"><b>Ns_ConnFirstFile</b>
and <b>Ns_ConnNextFile</b> routines allow you to manage a
search through the underlying hash table of uploaded
files.</p>

<h2>EXAMPLE
<a name="EXAMPLE"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Given the
following HTML form:</p>

<p style="margin-left:22%; margin-top: 1em">&lt;form
enctype=multipart/form-data method=post&gt; <br>
&lt;textarea name=stringdata&gt;&lt;/textarea&gt; <br>
&lt;input type=file name=filedata&gt; <br>
&lt;input type=submit&gt; <br>
&lt;/form&gt;</p>

<p style="margin-left:11%;">the following code would dump
the form strings and file info to the server log:</p>

<p style="margin-left:22%; margin-top: 1em">void <br>
DumpQuery(Ns_Conn *conn) <br>
{ <br>
Ns_Set *query; <br>
Ns_ConnFile *filePtr; <br>
Tcl_HashSearch search;</p>

<p style="margin-left:22%; margin-top: 1em">query =
Ns_ConnGetQuery(conn); <br>
if (query != NULL) { <br>
/* Dump key/values of all fields. */ <br>
Ns_SetPrint(query); <br>
/* Dump info on each embedded file. */ <br>
filePtr = Ns_ConnFirstFile(conn); <br>
while (filePtr != NULL) { <br>
Ns_Log(Notice, &quot;file: %s %d %d&quot;, filePtr-&gt;name,
<br>
filePtr-&gt;offset, filePtr-&gt;length); <br>
filePtr = Ns_ConnNextFile(conn); <br>
} <br>
} <br>
}</p>

<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Ns_Set(3),
Ns_Conn(3), Ns_ConnContent(3), ns_conn(n),
ns_parsequery(n)</p>

<h2>KEYWORDS
<a name="KEYWORDS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">form, query</p>
<hr>
</body>
</html>
