<!-- Creator     : groff version 1.21 -->
<!-- CreationDate: Sat May  5 10:27:46 2012 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p       { margin-top: 0; margin-bottom: 0; vertical-align: top }
       pre     { margin-top: 0; margin-bottom: 0; vertical-align: top }
       table   { margin-top: 0; margin-bottom: 0; vertical-align: top }
       h1      { text-align: center }
</style>
<title>ns_set</title>

</head>
<body>

<h1 align="center">ns_set</h1>

<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#SYNTAX">SYNTAX</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#NOTES">NOTES</a><br>
<a href="#KEYWORDS">KEYWORDS</a><br>

<hr>



<p style="margin-top: 1em">______________________________________________________________________________</p>

<h2>NAME
<a name="NAME"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">ns_set &minus;
commands</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Manipulate sets
of key-value pairs.</p>

<h2>SYNTAX
<a name="SYNTAX"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em"><b>ns_set
copy</b> ?-persist? <i>setId</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
cput</b> <i>setId key value</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
create</b> ?-persist? <i>name</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
delete</b> <i>setId fieldNumber</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
delkey</b> <i>setId key</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
find</b> <i>setId key</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
free</b> <i>setId</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
get</b> <i>setId key</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
icput</b> <i>setId key value</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
idelkey</b> <i>setId key</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
ifind</b> <i>setId key</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
iget</b> <i>setId key</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
isnull</b> <i>setId fieldNumber</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
iunique</b> <i>setId key</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
key</b> <i>setId fieldNumber</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
merge</b> <i>high low</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
move</b> <i>to from</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set</b>
<i>name setId</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
new</b> ?-persist? <i>name</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
print</b> <i>setId</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
put</b> <i>setId key value</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
size</b> <i>setId</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
split</b> ?-persist? <i>setId</i> ?splitChar?</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
truncate</b> <i>setId size</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
unique</b> <i>setId key</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
update</b> <i>setId key value</i></p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
value</b> <i>setId fieldNumber</i>
_________________________________________________________________</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em"><b>ns_set
copy</b></p>

<p style="margin-left:22%;">Returns a new set that has the
same name and key value pairs as the passed-in set (setId).
If -persist is specified, the new set will persist even
after the current transaction ends, and you can free it
later with ns_set free. If -persist is not specified, the
new set is automatically freed when the transaction
ends.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
cput</b></p>

<p style="margin-left:22%;">appends a new field to the set
with key key and value value if the field does not already
exist in the set. The field number of the new field is
returned.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
create</b></p>

<p style="margin-left:22%;">(which is the same as ns_set
new) allocates memory for a new set and returns the ID for
the new set. If -persist is specified, the new set will
persist even after the current transaction ends, and you can
free it later with ns_set free. If -persist is not
specified, the new set is automatically freed when the
transaction ends.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
delete</b></p>

<p style="margin-left:22%;">deletes the field in the set at
field number fieldNumber.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
delkey</b></p>

<p style="margin-left:22%;">removes the first field in the
set whose key is key. Note that there could be multiple
fields in the set with this key; this command only removes
the first occurrence.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
find</b></p>

<p style="margin-left:22%;">returns the index of the first
field in the specified set whose key name matches the
specified key. Zero (0) is the index of the first field. If
no matching fields are found, ns_set find returns -1.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
free</b></p>

<p style="margin-left:22%;">frees the specified set. Sets
must be explicitly freed with ns_set free if the -persist
option was used when creating the set. Otherwise, sets are
automatically freed when the transaction ends.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
get</b></p>

<p style="margin-left:22%;">returns the first value
associated with the passed-in key. If the key is invalid, an
empty string is returned.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
icput</b></p>

<p style="margin-left:22%;">is the case-insensitive
counterpart of ns_set cput.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
idelkey</b></p>

<p style="margin-left:22%;">is the case-insensitive
counterpart of ns_set delkey.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
ifind</b></p>

<p style="margin-left:22%;">is the case-insensitive
counterpart of ns_set find.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
iget</b></p>

<p style="margin-left:22%;">is the case-insensitive
counterpart of ns_set get.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
isnull</b></p>

<p style="margin-left:22%;">returns 1 if the value of the
field specified by fieldNumber is null and 0 if it is not.
Note that an empty string is not the same as a null. ns_set
isnull will return 0 for an empty string.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
iunique</b></p>

<p style="margin-left:22%;">returns 1 if the specified key
is unique in the specified set and 0 if it is not. The test
for uniqueness is performed case-insensitively. ns_set
unique is the case-sensitive version of this function.</p>

<p style="margin-left:22%; margin-top: 1em">For example, a
client could send multiple &quot;Accept:&quot; headers which
would end up in the header set for the connection. ns_set
iunique would return 0 for the &quot;Accept:&quot; key,
because there are multiple fields with the key
&quot;Accept:&quot;.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
key</b></p>

<p style="margin-left:22%;">extracts the key of the set at
field number fieldNumber. This command is useful when
looping through all the key-value pairs in the set.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
merge</b></p>

<p style="margin-left:22%;">merges two sets. Any fields in
the low set are appended to the high set if a field with the
same key name does not already exist in the high set.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
move</b></p>

<p style="margin-left:22%;">moves all fields from the from
set to the end of the to set, leaving the from set a valid,
empty set.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
name</b></p>

<p style="margin-left:22%;">returns the name of the
set.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
new</b></p>

<p style="margin-left:22%;">(which is the same as ns_set
create) allocates memory for a new set and returns the ID
for the new set. If -persist is specified, the new set will
persist even after the current transaction ends, and you can
free it later with ns_set free. If -persist is not
specified, the new set is automatically freed when the
transaction ends.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
print</b></p>

<p style="margin-left:22%;">prints the specified set to
stderr.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
put</b></p>

<p style="margin-left:22%;">appends a new field to the set
with key key and value value. Note that the field is
appended so if a previous field has the same key as the new
field, the previous field is returned by ns_set get command.
The field number of the new field is returned.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
size</b></p>

<p style="margin-left:22%;">returns the number of key-value
pairs in the set.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
split</b></p>

<p style="margin-left:22%;">splits one set into multiple
sets based on the splitChar as described below and returns a
Tcl list of the newly-allocated sets. It assumes that the
keys in the specified set (setId) contain a specific
character (splitChar) that can be used to separate the name
of a new set and the key in the new set. The default
splitChar is a period (.).</p>

<p style="margin-left:22%; margin-top: 1em">For example, if
two fields in the original set have &quot;dog.food&quot; and
&quot;cat.food&quot; as their key names and &quot;Yummy dog
food!&quot; and &quot;Yummy cat food!&quot; as their values,
ns_set split would return two new sets named &quot;dog&quot;
and &quot;cat&quot;. The dog set would have a single field
whose key is &quot;food&quot; and whose value is &quot;Yummy
dog food!&quot;. The cat set would have a single field whose
key is &quot;food&quot; and whose value is &quot;Yummy cat
food!&quot;.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
truncate</b></p>

<p style="margin-left:22%;">reduces the set to the first
size key-value pairs and frees the memory for the rest of
the key-value pairs that may have been in the set.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
unique</b></p>

<p style="margin-left:22%;">returns 1 if the specified key
is unique in the specified set and 0 if it is not. The test
for uniqueness is performed case-sensitively. ns_set iunique
is the case-insensitive version of this function.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
update</b></p>

<p style="margin-left:22%;">updates the first field in the
specified set whose key is key and replaces its value with
value. ns_set update is equivalent to ns_set delkey followed
by ns_set put.</p>

<p style="margin-left:11%; margin-top: 1em"><b>ns_set
value</b></p>

<p style="margin-left:22%;">extracts the value of the set
at field number fieldNumber. This command is useful when
looping through all the key-value pairs in the set.</p>

<h2>NOTES
<a name="NOTES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">The fields in
the set are ordered by number. The field numbers range from
0 to one less than the total number of fields. For example,
if you have a set with 5 fields, you would use &quot;ns_set
key $setid 4&quot; to extract the key of the last field in
the set.</p>

<h2>KEYWORDS
<a name="KEYWORDS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">key value</p>
<hr>
</body>
</html>
