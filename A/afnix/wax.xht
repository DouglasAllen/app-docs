<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<!-- afnix web application extension (wax) service -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<!-- page head -->
<head>
<title>
Web Application Extension Service</title>
<meta http-equiv="context-type" content="text/html; charset=utf-8"/>
<link href="style.css" type="text/css" rel="stylesheet"/>
<meta name="author" content="Amaury Darsch"/>
<meta name="copyright" content="1999-2012"/>
</head>
<!-- page body -->
<body>
<table>
<tr>
<td class="logo">
<img src="afnix.png" alt="AFNIX Writing System" width="120" height="120"/>
</td>
<td class="title">
Web Application Extension Service</td>
</tr>
</table>
<hr/>
<div class="chapter">
Web Application Extension Service</div>
<hr/>
<p class="text">
 The <em>Web Application Extension</em> service is an original implementation that provides the support for low level HTTP transaction as well as high level XHTML page generation. The service combines various modules and provides access to the modern generation of web contents. </p>
<div class="section">
Page service objects</div>
<p class="text">
 The <tt class="code">XhtmlRoot</tt> class is the primary interface to generate <em>xhtml page</em>. The class is derived from the <tt class="code">XmlRoot</tt> class and the <tt class="code">Mime</tt>object. for this reason, creating a xhtml page is equivalent to add xml nodes to the page. The xhtml version is assumed to be <em>1.1</em>. </p>
<p class="subsect">
Page creation</p>
<p class="text">
 The <tt class="code">XhtmlRoot</tt> constructor takes a string argument which is the title page. When the root page is created, a <em>head</em> and <em>body</em> nodes are automatically created. Once created, it is possible to retrieve the head and body nodes from the root node. The head and body nodes are part of the <em>html</em> node which is automatically instantiated as a <tt class="code">XhtmlHtml</tt> object. The html node can always be retrieved from the root node with the <tt class="code">get-child</tt> xml method. </p>
<pre class="frame">
<![CDATA[# create a new xhtml page
const page (afnix:wax:XhtmlRoot "AFNIX wax service")
# get the head node
const head (page:get-head)
# get the body node
const body (page:get-body)

]]></pre>
<p class="text">
 The head and body nodes are part of the <em>html</em> node which is automatically instantiated as a <tt class="code">XhtmlHtml</tt> object. The html node can always be retrieved from the root node with the <tt class="code">get-child</tt> xml method. The root methods <tt class="code">get-head</tt> and <tt class="code">get-body</tt> are convenient methods that ease the page design by eliminating the references to the html node. </p>
<pre class="frame">
<![CDATA[# create a new xhtml page
const page (afnix:wax:XhtmlRoot "AFNIX wax service")
# get the html node
const html (page:get-child "html")
# get the head node
const head (html:get-head)
# get the body node
const body (html:get-body)

]]></pre>
<p class="subsect">
Page header</p>
<p class="text">
 The <tt class="code">XhtmlHead</tt> class is the xml node that handles the xhtml head. The object is automatically created when calling the <tt class="code">XhtmlRoot</tt> constructor. During the construction process, the head is automatically set with a title. Once created, the head can be filled with meta information and styles. The <tt class="code">add-meta</tt> method is designed to add meta information, while the <tt class="code">add-style</tt> add a link node with a style reference to the head. </p>
<pre class="frame">
<![CDATA[# add a meta tag
head:add-meta "copyright" "© 2000"
# add a style path
head:add-style "/style.css"

]]></pre>
<p class="text">
 The <tt class="code">add-meta</tt> method adds a <tt class="code">XhtmlMeta</tt> object which is a xml tag node. The first argument is the meta descriptor while the second argument is the meta content. Note that the <tt class="code">add-meta</tt> method can be simulated by calling the <tt class="code">XhtmlMeta</tt> constructor and then adding the node to the head node. </p>
<pre class="frame">
<![CDATA[# create a meta node
const node (afnix:wax:XhtmlMeta "copyright" "© 2012")
# add the node to the head
head:add node

]]></pre>
<p class="text">
 The <tt class="code">add-style</tt> method adds a <tt class="code">XhtmlStyle</tt> object which is a xml tag node. The string argument is the url style sheet path which gets automatically transformed to the form <em>@import(url)</em>. Note that the <tt class="code">add-style</tt> method can be simulated by calling the <tt class="code">XhtmlStyle</tt> constructor and then adding the node to the head node. </p>
<pre class="frame">
<![CDATA[# create a style node
const node (afnix:wax:XhtmlStyle "/style.css")
# add the node to the head
head:add node

]]></pre>
<p class="subsect">
Page body</p>
<p class="text">
 The <tt class="code">XhtmlBody</tt> class is the xml node that handles the xhtml body. The object is automatically created when calling the <tt class="code">XhtmlRoot</tt> constructor. Once created, the body node can be filled with any valid xhtml node. Since the node are initially xml tag node, it is always possible to create a tag by name and set the attributes and child nodes manually. </p>
<pre class="frame">
<![CDATA[# create a new xhtml page
const page (afnix:wax:XhtmlRoot "AFNIX wax service")
# get the body node
const body (page:get-body)
# add a node
body:add-child node

]]></pre>
<p class="subsect">
Page emission</p>
<p class="text">
 Since the <tt class="code">XhtmlRoot</tt> object is a xml root node, the node can be used to write the complete hierarchy. The xml node node provides the <tt class="code">write</tt> method that write a xml tree into a buffer of an output stream. </p>
<pre class="frame">
<![CDATA[# create a new xhtml page
const page (afnix:wax:XhtmlRoot "AFNIX wax service")
# write to the output stream
page:write

]]></pre>
<p class="text">
 Another mechanism for writing the page is to use the fact that the <tt class="code">XhtmlRoot</tt> class implements also the <tt class="code">Mime</tt> interface. With this in mind, the <tt class="code">XhtmlRoot</tt> can be used within the <tt class="code">HttpReply</tt>. This method is particularly useful when writing automated page generation, such like CGI scripts. </p>
<pre class="frame">
<![CDATA[# create a new xhtml page
const page (afnix:wax:XhtmlRoot "AFNIX wax service")
# create an http reply object
const reply (afnix:wax:HttpReply)
# write the page as a mime object
reply:add-buffer page
# write the result to the output
reply:write

]]></pre>
<div class="section">
Page design objects</div>
<p class="text">
 The <em>wax service module</em> is designed to provide several object that ease the task of creating a xhtml page. Such objects range from comment to table. Most of the time, the construction is simple the resulting node only need to be added to the page tree. When it comes to add text, the problem is becoming more subtle and is discussed later in this section. </p>
<p class="subsect">
Comment node</p>
<p class="text">
 Adding a comment is done with the <tt class="code">XmlComment</tt> class which take the comment string in the constructor. Once created, the comment node can be added to the tree. </p>
<pre class="frame">
<![CDATA[# add a comment to the body node
body:add-child (
  afnix:xml:XmlComment "this is a comment")

]]></pre>
<p class="subsect">
Node style class</p>
<p class="text">
 When the xhtml page is combined with the cascaded style sheet (CSS), the xhtml node tag often uses a <em>class</em> name to refer to a particular style. The <em>class style</em> is just a node attribute which can be set with the <tt class="code">add-attribute</tt> method. However, most of the time, the library provides object which have the style as the first argument in the constructor. For example, the <tt class="code">XhtmlDiv</tt> constructor take 0 or one argument. With one argument, the string argument is used as the style attribute. </p>
<pre class="frame">
<![CDATA[# create a xhtml div with a class attribute
const div (afnix:wax:XhtmlDiv "nice")
# create a xhtml div  and set the class manually
const div (afnix:wax:XhtmlDiv)
div:set-attribute "class" "nice"

]]></pre>
<p class="subsect">
Adding text paragraph</p>
<p class="text">
 Adding text to a page is not a trivial task when it comes to deal with text style. By default, a piece of text is stored in the <tt class="code">XmlText</tt> node. Using this node is easy. However, in a programming context, its use can become heavy. For this reason, all xml nodes provide the <tt class="code">parse</tt> method which can be used to add a xml tree to the calling node. When it comes to add text that includes rendering tag, this method is quite handy. </p>
<pre class="frame">
<![CDATA[# add a text with some piece in italic
node:parse "this is a <i>simple</i> method"

]]></pre>
<p class="text">
 The <tt class="code">XhtmlPara</tt> node is the preferred node for adding text to a xhtml page. The node takes optionally the style name in the constructor. A boolean flag can also be used to create an empty paragraph node. </p>
<pre class="frame">
<![CDATA[# create a paragraph node with a style
const p (afnix:wax:XhtmlPara "title")
# add some text
p:parse "the paragraph text"

]]></pre>
<p class="subsect">
Adding reference</p>
<p class="text">
 Adding reference or hyperlink to a page is achieved with the <tt class="code">XhtmlRef</tt> class. Most of the time, the object is built with a uri and a text. when the node has been created, the node can be added to the page tree. </p>
<pre class="frame">
<![CDATA[# create a hyperlink
const node (
  afnix:wax:XhtmlRef "http://www.afnix.org" "afnix")
# add the node in a paragraph
p:add-child node

]]></pre>
<p class="subsect">
Formatting elements</p>
<p class="text">
 The <tt class="code">XhtmlDiv</tt> and <tt class="code">XhtmlHr</tt> classes are the basic formatting xhtml elements. The <tt class="code">XhtmlDiv</tt> is a grouping element and the <tt class="code">XhtmlHr</tt> is a simple horizontal ruler element. Both classes take 0 or one argument which is the style name. </p>
<pre class="frame">
<![CDATA[# create a div element
const div (afnix:wax:XhtmlDiv "menu")
# create a ruler element
const hr  (afnix:wax:XhtmlHr)

]]></pre>
<div class="section">
Managing table</div>
<p class="text">
 The <em>wax service module</em> provides an extensive support of he xhtml table element. There are basically two strategies for creating a table. One is to use the html elements or the other is to use a print table object and automatically feed the xhtml table. The first method provides a better control while the second one is easier to use. </p>
<p class="subsect">
The table element</p>
<p class="text">
 The <tt class="code">XhtmlTable</tt> class is the class that manages xhtml table. As usual, a default style name can be specified in the constructor. Eventually, a default table row and table data default style can also be specified. Such default value are used when creating a new row with the <tt class="code">new-row</tt> method. </p>
<pre class="frame">
<![CDATA[# create an element with a default tr and th/td style
const tbl (afnix:wax:XhtmlTable "text" "text" "text")
# get a new row with a default style
const tr (tbl:new-row)

]]></pre>
<p class="text">
 In the previous example, a table is created with a default style for the table row. When a new row is created, the default style is used for that row. If there is no default style, the row is created without a style. Note that the <tt class="code">new-row</tt> method takes also a style argument that overwrites the default one. </p>
<p class="subsect">
Building the table</p>
<p class="text">
 A table is built by adding row and data element into the rows. A row is created with the <tt class="code">new-row</tt> method or the object can be constructed directly and added to the node with the <tt class="code">add-child</tt> method. The <tt class="code">XhtmlTr</tt> class is the table row class. </p>
<pre class="frame">
<![CDATA[# get a new row with a default style
trans tr (tbl:new-row)
# create a row directly
trans tr (afnix:wax:XhtmlTr "text")

]]></pre>
<p class="text">
 When a row has been created, the data can be added to the row. Normally, the <tt class="code">new-data</tt> method is used to create a new table data element. If a default style is defined in the table row, the table data element is built with that style. The <tt class="code">new-head</tt> method can also be used to create table header element. Again, if a default table header style exists in the table row, the element is built with that style. The <tt class="code">XhtmlTd</tt> class is the table data class and the <tt class="code">XhtmlTh</tt> class is the table header class. </p>
<pre class="frame">
<![CDATA[# get a new data element
trans td (tr:new-data)
# create new head element
trans th (tr:new-head)

]]></pre>
<p class="text">
 When the table data node has been created, the <tt class="code">parse</tt> method or the <tt class="code">add-child</tt> method can be called to add other nodes. another method for building the table is to use the <tt class="code">add-table</tt> method which uses a print table object. In such case, the table rows and data elements are automatically added in the table. </p>
<p class="subsect">
The table structure</p>
<p class="text">
 The table can be designed directly with table rows with table headers and table data elements. Another method, which is more structured is to use the table head, table body and table footer elements. The <tt class="code">XhtmlThead</tt> class is the table head element class. The <tt class="code">XhtmlTbody</tt> class is the table body element class. The <tt class="code">XhtmlTfoot</tt> class is the table footer element class. These classes behaves exactly like the <tt class="code">XhtmlTable</tt> and are in fact all derived from the <tt class="code">XhtmlTelem</tt> class. </p>
<pre class="frame">
<![CDATA[# create a xhtml table
const table (afnix:wax:XhtmlTable "text")
# create a table body
const tbody (
  afnix:wax:XhtmlTable "text" "text" "text")
# add a print tbl in the body
tbody:add-table ptbl
# add the body to the table
table:ad-child tbody

]]></pre>
<p class="text">
 A table caption node can also be set with the <tt class="code">set-caption</tt> method. The method simply creates a <tt class="code">XhtmlCaption</tt> node and adds it to the table. The caption text is part of the method call which is used by the caption node constructor. It is also possible to create the caption node by calling the <tt class="code">XhtmlCaption</tt> constructor and adding it to the table with he <tt class="code">add-child</tt> method. </p>
<pre class="frame">
<![CDATA[# create a xhtml table
const table (afnix:wax:XhtmlTable "text")
# set a table caption
table:set-caption "the afnix table system"

]]></pre>
<p class="text">
 The table structure can also be defined with the <tt class="code">XhtmlCgr</tt> class which corresponds to the xhtml column group element. The column group element is designed to support the <em>col</em> element that formats the table column. </p>
<pre class="frame">
<![CDATA[# create a table
const table (afnix:wax:XhtmlTable "text")
# set the table with to 100%
table:add-attribute "width" "100%"
# create a column group
table:add-child (const xcgr (afnix:wax:XhtmlCgr))
# add a column with 30% width
cgr:add-child (afnix:wax:XhtmlCol "30%")
# add a column with 70% width
cgr:add-child (afnix:wax:XhtmlCol "70%")

]]></pre>
<hr/>
<div class="appendix">
Web Application Extension Service Reference</div>
<hr/>
<p/>
<div class="elem">
XhtmlRoot</div>
<p class="text">
 The <tt class="code">XhtmlRoot</tt> class is a xml root node used for the design of a xhtml document page. At construction, the root node is initialized with a default xml processing instruction, and xhmtl node with head and body The head and body nodes can be used to add more nodes in order to build the document. The construction argument is the page title. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-root-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlRoot
</i><i>Mime
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlRoot</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlRoot constructor creates a default xhtml
	  page with a head and a body. The head node is set with the
	  string title argument.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>get-head</i><i> (&rarr; XhtmlHead)</i><i> (none)</i><hr/>
<p class="text">

	  The get-head method returns the xhtml head node.
	</p>
</div>
<p/>
<div class="frame">
<i>get-body</i><i> (&rarr; XhtmlBody)</i><i> (none)</i><hr/>
<p class="text">

	  The get-body method returns the xhtml body node.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlHtml</div>
<p class="text">
 The <tt class="code">XhtmlHtml</tt> class is a xhtml html node used for the design of a xhtml document page. At construction, the html node is initialized with a head node and a body node. Because a valid xhtml document must contain a title the constructor takes at least a title argument. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-html-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlHtml</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlHtml constructor creates a default xhtml
	  html node with a head and a body. The head node is set with the
	  string title argument.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>get-head</i><i> (&rarr; XhtmlHead)</i><i> (none)</i><hr/>
<p class="text">

	  The get-head method returns the xhtml head node.
	</p>
</div>
<p/>
<div class="frame">
<i>get-body</i><i> (&rarr; XhtmlBody)</i><i> (none)</i><hr/>
<p class="text">

	  The get-body method returns the xhtml body node.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlHead</div>
<p class="text">
 The <tt class="code">XhtmlHead</tt> class is a xhtml head node used for the design of a xhtml document page. At construction, the head node is initialized with a with a title node. The class is designed to hold as well meta nodes and style nodes. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-head-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlHead</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlHead constructor creates a default xhtml
	  head node with a title. The string argument is the head title.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>add-meta</i><i> (&rarr; none)</i><i> (String String)</i><hr/>
<p class="text">

	  The add-meta method adds a XhtmlMeta
	  node to the head node. The first argument is the meta
	  descriptor. The second argument is the meta contents.
	</p>
</div>
<p/>
<div class="frame">
<i>add-style</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The add-style method adds a XhtmlLink
	  node to the head node. The string argument is the style url
	  path. The link node is automatically configured to reference a
	  'text/css' mime type.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlBody</div>
<p class="text">
 The <tt class="code">XhtmlBody</tt> class is a xhtml body node used for the design of a xhtml document page. The class is designed to be filled with other xhtml nodes. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-body-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlBody</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlBody constructor creates a default xhtml
	  body node.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlTitle</div>
<p class="text">
 The <tt class="code">XhtmlTitle</tt> class is a xhtml title node used in the head node. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-title-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlTitle</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlTitle constructor creates a xhtml
	  title node. The string argument is the title value. The title
	  node is designed for the XhtmlHead class.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-title</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-title method set the node title by value.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlMeta</div>
<p class="text">
 The <tt class="code">XhtmlMeta</tt> class is a xhtml meta node used in the head node. The meta data node is an empty node with two attributes which are the descriptor and content value. The meta data is stored internally as a xml attribute. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-meta-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlMeta</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlMeta constructor creates a xhtml
	  meta node with a descriptor name and content value. The first
	  argument is he descriptor name which is used as the node attribute
	  name. The second argument is the content vale which is the
	  attribute value.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlLink</div>
<p class="text">
 The <tt class="code">XhtmlLink</tt> class is a xhtml link node used in the head node. The link node is an empty node with several attributes. The most important one is the 'href' attribute that specifies the link uri. Other attributes like 'type' or 'rel' can also be set at construction. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-link-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlLink</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlLink constructor creates a xhtml
	  link node by reference. The first argument is the link reference.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlLink</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlLink constructor creates a xhtml
	  link node by reference and type. The first argument is the
	  link reference. The second argument is the link type. The link
	  type is defined as a mime type.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlLink</i><i> (String String String)</i><hr/>
<p class="text">

	  The XhtmlLink constructor creates a xhtml
	  link node by reference, type and relation. The first argument is
	  the link reference. The second argument is the link type. The
	  link type is defined as a mime type. The third argument is the
	  link relation.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlStyle</div>
<p class="text">
 The <tt class="code">XhtmlStyle</tt> class is a xhtml style node used in the head node. The style node is built with a xml text node that holds the formatted url string. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-style-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlStyle</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlStyle constructor creates a xhtml
	  style node with a url path. The string argument is the url path
	  of the style sheet file.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlScript</div>
<p class="text">
 The <tt class="code">XhtmlScript</tt> class is a xhtml script node used in the head and body node. The script node is built with a xml tag node that holds the script content. Sometimes it is recommended to place the script inside a CDATA node that is stored as a child node of the script node. A boolean flag controls this feature at construction. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-script-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlScript</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlScript constructor creates a xhtml
	  script node with a type. The string argument is the mime type
	  string such like 'text/javascript'.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlScript</i><i> (String Boolean)</i><hr/>
<p class="text">

	  The XhtmlScript constructor creates a xhtml
	  script node with a type and a CDATA node control flag. The first
	  argument is the mime type string such like 'text/javascript'. The second
	  argument is the CDATA node control flag. If the flag is true,
	  all scripts attached to the node are placed into a 'CDATA' node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlScript</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlScript constructor creates a xhtml
	  script node with a type and a url. The first argument is the
	  mime type string such like 'text/javascript'. The second
	  argument is the script source url.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlPara</div>
<p class="text">
 The <tt class="code">XhtmlPara</tt> class is a xhtml paragraph node used in the body element of a xhtml page. The paragraph node can be created with a style name or as an empty node. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-para-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlPara</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlPara constructor creates a default xhtml
	  paragraph node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlPara</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlPara constructor creates a xhtml paragraph
	  node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlPara</i><i> (Boolean)</i><hr/>
<p class="text">

	  The XhtmlPara constructor creates an empty xhtml
	  paragraph if the boolean argument is true.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlEmph</div>
<p class="text">
 The <tt class="code">XhtmlEmph</tt> class is a xhtml emphasize node used in the body element of a xhtml page. The emphasize node can be created with a style name. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-emph-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlEmph</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlEmph constructor creates a default xhtml
	  emphasize node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlEmph</i><i> (String)</i><hr/>
<p class="text">

	  The Xhtmlemph constructor creates a xhtml emphasize
	  node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlRef</div>
<p class="text">
 The <tt class="code">XhtmlRef</tt> class is a xhtml reference node used in the body element of a xhtml page. The node can be used to create hyperlink that references object by a uri. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-ref-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlRef</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlRef constructor creates a default xhtml
	  reference node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlRef</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlRef constructor creates a xhtml reference
	  node with a uri. The string argument is the uri to use.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlRef</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlRef constructor creates a xhtml reference
	  node with a uri and a reference text. The first argument is the
	  uri. The second argument is the reference text.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlImg</div>
<p class="text">
 The <tt class="code">XhtmlImg</tt> class is a xhtml image node used in the html body. The image node is an empty node with several attributes including the image source, the image width and height and an alternate string. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-img-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlImg</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlImg constructor creates a xhtml image node
	  by source and alternate name. The first argument is the image
	  uri. The second argument is the alternate name.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-width</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-width method set the image width attribute.
	</p>
</div>
<p/>
<div class="frame">
<i>set-height</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-height method set the image height attribute.
	</p>
</div>
<p/>
<div class="frame">
<i>set-geometry</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-geometry method set the image width and
	  height attribute in one call. 
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlDiv</div>
<p class="text">
 The <tt class="code">XhtmlDiv</tt> class is a xhtml <em>div</em> node used in the body element of a xhtml page. The <em>div</em> node is a xhtml grouping element. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-div-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlDiv</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlDiv constructor creates a default xhtml
	  div node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlDiv</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlDiv constructor creates a xhtml div
	  node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlPre</div>
<p class="text">
 The <tt class="code">XhtmlPre</tt> class is a xhtml <em>pre</em> node used in the body element of a xhtml page. The <em>pre</em> node is a xhtml formatting element. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-pre-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlPre</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlPre constructor creates a default xhtml
	  pre node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlPre</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlPre constructor creates a xhtml pre
	  node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlHr</div>
<p class="text">
 The <tt class="code">XhtmlHr</tt> class is a xhtml <em>hr</em> node used in the body element of a xhtml page. The <em>hr</em> node is a xhtml horizontal ruler element. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-hr-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlHr</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlHr constructor creates a default xhtml
	  hr node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlHr</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlHr constructor creates a xhtml hr
	  node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlCgr</div>
<p class="text">
 The <tt class="code">XhtmlCgr</tt> class is a xhtml column group node used in the table element. The column group is designed to hold the column definition bound by the <tt class="code">XhtmlCol</tt> class. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-cgr-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlCgr</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlCgr constructor creates a default xhtml
	  colgroup node.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlCol</div>
<p class="text">
 The <tt class="code">XhtmlCol</tt> class is a xhtml column node used in the table column group element. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-col-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlCol</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlCol constructor creates a default xhtml
	  col node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlCol</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlCol constructor creates a xhtml
	  col node with a string width argument. The argument is
	  the width attribute value.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlTh</div>
<p class="text">
 The <tt class="code">XhtmlTh</tt> class is a xhtml <em>th</em> node used in the table row. The object can be built with a style name. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-th-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlTh</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlTh constructor creates a default xhtml
	  th node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTh</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlTh constructor creates a xhtml th
	  node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlTd</div>
<p class="text">
 The <tt class="code">XhtmlTd</tt> class is a xhtml <em>td</em> node used in the table row. The object can be built with a style name. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-td-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlTd</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlTd constructor creates a default xhtml
	  td node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTd</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlTd constructor creates a xhtml td
	  node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlTr</div>
<p class="text">
 The <tt class="code">XhtmlTr</tt> class is a xhtml <em>tr</em> node used in the table node. The table row node is designed to accumulate table head or table data nodes. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-tr-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlTr</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlTr constructor creates a default xhtml
	  tr node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTr</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlTr constructor creates a xhtml tr
	  node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTr</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlTr constructor creates a xhtml tr
	  node with a style and a default table data style. The string
	  argument is the table row style name. The second argument is the
	  default table data style.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>new-head</i><i> (&rarr; XhtmlTh)</i><i> (none | String)</i><hr/>
<p class="text">

	  The new-head method returns a new table head data
	  object. Without argument, a default XhtmlTh object
	  is created. With a string argument, the  XhtmlTh
	  object is constructed with a style name.
	</p>
</div>
<p/>
<div class="frame">
<i>new-data</i><i> (&rarr; XhtmlTd)</i><i> (none | String)</i><hr/>
<p class="text">

	  The new-data method returns a new table data
	  object. Without argument, a default XhtmlTd object
	  is created. With a string argument, the  XhtmlTd
	  object is constructed with a style name.
	</p>
</div>
<p/>
<div class="frame">
<i>set-head-class</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-head-class method sets the default table
	  head style. The default style is use with the
	  new-head method.
	</p>
</div>
<p/>
<div class="frame">
<i>set-data-class</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-data-class method sets the default table
	  data style. The default style is use with the
	  new-data method.
	</p>
</div>
<p/>
<div class="frame">
<i>set-xdef-class</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-xdef-class method sets the default table
	  head and data style. The default style is use with the
	  new-head and new-data methods. This
	  method combines the set-head-class and the
	  set-head-class</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlTelem</div>
<p class="text">
 The <tt class="code">XhtmlTelem</tt> class is an abstract class that implements the node behavior for the table head, body, foot and table elements. The table element node is designed to accumulate table row nodes. This class cannot be constructed directly. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-telem-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlTag
</i>
</pre>
<p class="elem">
Methods</p>
<div class="frame">
<i>new-row</i><i> (&rarr; XhtmlTr)</i><i> (none | String)</i><hr/>
<p class="text">

	  The new-row method returns a new table row
	  object. Without argument, a default XhtmlTr object 
	  is created. With a string argument, the XhtmlTr
	  object is constructed with a style name.
	</p>
</div>
<p/>
<div class="frame">
<i>add-table</i><i> (&rarr; none)</i><i> (PrintTable [Boolean])</i><hr/>
<p class="text">

	  The add-table method adds a print table into the
	  table element by adding automatically the row and the associated
	  formatting information such like the data direction. The optional
	  second argument controls whether or not the table tag shall be used
	  to build reference node for the table elements.
	</p>
</div>
<p/>
<div class="frame">
<i>set-xrow-class</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-xrow-class method sets the default table row
	  data style. The default row style is use with the
	  new-row method.
	</p>
</div>
<p/>
<div class="frame">
<i>set-xdef-class</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-xdef-class method sets the default table
	  head and data style. The default style is use with the
	  new-row method to set the table head and data
	  default style.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlThead</div>
<p class="text">
 The <tt class="code">XhtmlThead</tt> class is a xhtml thead node. The table head node is designed to accumulate table rows nodes. The class acts almost like the xhtml table class. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-thead-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XhtmlTelem
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlThead</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlThead constructor creates a default xhtml
	  table head node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlThead</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlThead constructor creates a xhtml table
	  head node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlThead</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlThead constructor creates a xhtml table
	  head node with a style and a default table row style. The string
	  argument is the table head style name. The second argument is the
	  default table row style.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlThead</i><i> (String String String)</i><hr/>
<p class="text">

	  The XhtmlThead constructor creates a xhtml table
	  head node with a style, a default table row style and a default
	  table data style. The string argument is the table head style
	  name. The second argument is the default table row style. The
	  third argument is the table data style.      
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlTbody</div>
<p class="text">
 The <tt class="code">XhtmlTbody</tt> class is a xhtml tbody node. The table body node is designed to accumulate table rows nodes. The class acts almost like the xhtml table class. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-tbody-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XhtmlTelem
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlTbody</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlTbody constructor creates a default xhtml
	  table body node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTbody</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlTbody constructor creates a xhtml table
	  body node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTbody</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlTbody constructor creates a xhtml table
	  body node with a style and a default table row style. The string
	  argument is the table body style name. The second argument is the
	  default table row style.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTbody</i><i> (String String String)</i><hr/>
<p class="text">

	  The XhtmlTbody constructor creates a xhtml table
	  body node with a style, a default table row style and a default
	  table data style. The string argument is the table body style
	  name. The second argument is the default table row style. The
	  third argument is the table data style.      
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlTfoot</div>
<p class="text">
 The <tt class="code">XhtmlTfoot</tt> class is a xhtml tfoot node. The table foot node is designed to accumulate table rows nodes. The class acts almost like the xhtml table class. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-tfoot-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XhtmlTelem
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlTfoot</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlTfoot constructor creates a default xhtml
	  table foot node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTfoot</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlTfoot constructor creates a xhtml table
	  foot node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTfoot</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlTfoot constructor creates a xhtml table
	  foot node with a style and a default table row style. The string
	  argument is the table foot style name. The second argument is the
	  default table row style.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTfoot</i><i> (String String String)</i><hr/>
<p class="text">

	  The XhtmlTfoot constructor creates a xhtml table
	  foot node with a style, a default table row style and a default
	  table data style. The string argument is the table foot style
	  name. The second argument is the default table row style. The
	  third argument is the table data style.      
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlTable</div>
<p class="text">
 The <tt class="code">XhtmlTable</tt> class is a xhtml table node. The table node is designed to accumulate table row nodes or column group nodes. The table can also be designed with a table head, body and foot nodes. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-table-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XhtmlTelem
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlTable</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlTable constructor creates a default xhtml
	  table foot node.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTable</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlTable constructor creates a xhtml table
	  foot node with a style. The string argument is the style name.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTable</i><i> (String String)</i><hr/>
<p class="text">

	  The XhtmlTable constructor creates a xhtml table
	  foot node with a style and a default table row style. The string
	  argument is the table foot style name. The second argument is the
	  default table row style.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlTable</i><i> (String String String)</i><hr/>
<p class="text">

	  The XhtmlTable constructor creates a xhtml table
	  foot node with a style, a default table row style and a default
	  table data style. The string argument is the table foot style
	  name. The second argument is the default table row style. The
	  third argument is the table data style.      
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-caption</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-caption method sets the table caption. A
	  new XhtmlCaption node is automatically added to the
	  table tree during this method call.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlMime</div>
<p class="text">
 The <tt class="code">XmlMime</tt> class is a generic xml mime document class. The class is used to construct a mime version of a xml document which can be obtained from a file name, or an input stream. By default, the mime type 'application/xml'. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xml-mime-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlDocument
</i><i>Mime
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlMime</i><i> (none)</i><hr/>
<p class="text">

	  The XmlMime constructor creates a default xml
	  mime document.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlMime</i><i> (String)</i><hr/>
<p class="text">

	  The XmlMime constructor creates a xml mime document
	  by parsing a file. The file name is the string argument.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlMime</i><i> (String InputStream)</i><hr/>
<p class="text">

	  The XmlMime constructor creates a xml mime document
	  by name and by parsing the input stream. The first argument is
	  the xml document name. The second argument is the input stream
	  to parse.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XhtmlMime</div>
<p class="text">
 The <tt class="code">XhtmlMime</tt> class is a generic xhtml mime document class. The class is used to construct a mime version of a xhtml document which can be obtained from a file name, or an input stream. By default, the mime type 'application/xhtml+xml'. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xhtml-mime-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlMime
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XhtmlMime</i><i> (none)</i><hr/>
<p class="text">

	  The XhtmlMime constructor creates a default xhtml
	  mime document.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlMime</i><i> (String)</i><hr/>
<p class="text">

	  The XhtmlMime constructor creates a xhtml mime document
	  by parsing a file. The file name is the string argument.
	</p>
</div>
<p/>
<div class="frame">
<i>XhtmlMime</i><i> (String InputStream)</i><hr/>
<p class="text">

	  The XhtmlMime constructor creates a xhtml mime document
	  by name and by parsing the input stream. The first argument is
	  the xhtml document name. The second argument is the input stream
	  to parse.
	</p>
</div>
<p/>
</body>
</html>
