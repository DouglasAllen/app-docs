<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<!-- afnix web application extension (wax) service -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<!-- page head -->
<head>
<title>
Standard Math Module</title>
<meta http-equiv="context-type" content="text/html; charset=utf-8"/>
<link href="style.css" type="text/css" rel="stylesheet"/>
<meta name="author" content="Amaury Darsch"/>
<meta name="copyright" content="1999-2012"/>
</head>
<!-- page body -->
<body>
<table>
<tr>
<td class="logo">
<img src="afnix.png" alt="AFNIX Writing System" width="120" height="120"/>
</td>
<td class="title">
Standard Math Module</td>
</tr>
</table>
<hr/>
<div class="chapter">
Standard Math Module</div>
<hr/>
<p class="text">
 The <em>Standard Mathematical</em> module is an original implementation of various mathematical facilities. The module can be divided into several catgeories which include convenient functions, linear algebra and real analysis. </p>
<div class="section">
Random number services</div>
<p class="text">
 The <em>math</em> module provides various functions that generate random numbers in different formats. </p>
<table class="text">
<tr class="text">
<th class="text">
Function</th>
<th class="text">
Description</th>
</tr>
<tr class="text">
<td class="text">
get-random-integer</td>
<td class="text">
return a random integer number</td>
</tr>
<tr class="text">
<td class="text">
get-random-real</td>
<td class="text">
return a random real number between 0.0 and 1.0</td>
</tr>
<tr class="text">
<td class="text">
get-random-relatif</td>
<td class="text">
return a random relatif number</td>
</tr>
<tr class="text">
<td class="text">
get-random-prime</td>
<td class="text">
return a random probable prime relatif number</td>
</tr>
</table>
<p/>
<p class="text">
 The numbers are generated with the help of the system random generator. Such generator is machine dependant and results can vary from one machine to another. </p>
<div class="section">
Primality testing services</div>
<p class="text">
 The <em>math</em> module provides various predicates that test a number for a primality condition. Most of these predicates are intricate and are normally not used except the <tt class="code">prime-probable-p</tt> predicate. </p>
<table class="text">
<tr class="text">
<th class="text">
Predicate</th>
<th class="text">
Description</th>
</tr>
<tr class="text">
<td class="text">
fermat-p</td>
<td class="text">
Fermat test predicate</td>
</tr>
<tr class="text">
<td class="text">
miller-rabin-p</td>
<td class="text">
Miller-Rabin test predicate</td>
</tr>
<tr class="text">
<td class="text">
prime-probable-p</td>
<td class="text">
general purpose prime probable test</td>
</tr>
<tr class="text">
<td class="text">
get-random-prime</td>
<td class="text">
return a random probable prime relatif number</td>
</tr>
</table>
<p/>
<p class="text">
 The <tt class="code">fermat-p</tt> and <tt class="code">miller-rabin-p</tt> predicates return true if the primality condition is verified. These predicate operate with a base number. The prime number to test is the second argument. </p>
<p class="subsect">
Fermat primality testing</p>
<p class="text">
 The <tt class="code">fermat-p</tt> predicate is a simple primality test based on the "little Fermat theorem". A base number greater than 1 and less than the number to test must be given to run the test. </p>
<pre class="frame">
<![CDATA[afnix:mth:fermat-p 2 7

]]></pre>
<p class="text">
 In the preceeding example, the number 7 is tested, and the <tt class="code">fermat-p</tt> predicate returns true. If a number is prime, it is guaranted to pass the test. The oppositte is not true. For example, 561 is a composite number, but the Fermat test will succeed with the base 2. Numbers that successfully pass the Fermat test but which are composite are called Carmichael numbers. For those numbers, a better test needs to be employed, such like the Miller-Rabin test. </p>
<p class="subsect">
Miller-Rabin primality testing</p>
<p class="text">
 The <tt class="code">miller-rabin-p</tt> predicate is a complex primality test that is more efficient in detecting prime number at the cost of a longer computation. A base number greater than 1 and less than the number to test must be given to run the test. </p>
<pre class="frame">
<![CDATA[afnix:mth:miller-rabin-p 2 561

]]></pre>
<p class="text">
 In the preceeding example, the number 561, which is a Carmichael number, is tested, and the <tt class="code">miller-rabin-p</tt> predicate returns false. The probability that a number is prime depends on the number of times the test is ran. Numerous studies have been made to determine the optimal number of passes that are needed to declare that a number is prime with a good probability. The <tt class="code">prime-probable-p</tt> predicate takes care to run the optimal number of passes. </p>
<p class="subsect">
General primality testing</p>
<p class="text">
 The <tt class="code">prime-probable-p</tt> predicate is a complex primality test that incorporates various primality tests. To make the story short, the prime candidate is first tested with a series of small prime numbers. Then a fast Fermat test is executed. Finally, a series of Miller-Rabin tests are executed. Unlike the other primality tests, this predicate operates with a number only and optionally, the number of test passes. This predicate is the recommended test for the folks who want to test their numbers. </p>
<pre class="frame">
<![CDATA[afnix:mth:prime-probable-p 17863

]]></pre>
<hr/>
<div class="appendix">
Standard Math Reference</div>
<hr/>
<p class="elem">
Functions</p>
<div class="frame">
<i>get-random-integer</i><i> (&rarr; Integer)</i><i> (none|Integer)</i><hr/>
<p class="text">

	The get-random-integer function returns a random integer
	number. Without argument, the integer range is machine
	dependent. With one integer argument, the resulting integer number
	is less than the specified maximum bound.
      </p>
</div>
<p/>
<div class="frame">
<i>get-random-real</i><i> (&rarr; Real)</i><i> (none|Boolean)</i><hr/>
<p class="text">

	The get-random-real function returns a random real
	number between 0.0 and 1.0. In the first form, without argument,
	the random number is between 0.0 and 1.0 with 1.0 included. In the
	second form, the boolean flag controls whether or not the 1.0 is
	included in the result. If the argument is false, the 1.0 value is
	guaranted to be excluded from the result. If the argument is true,
	the 1.0 is a possible random real value. Calling this function
	with the argument set to true is equivalent to the first form
	without argument.
      </p>
</div>
<p/>
<div class="frame">
<i>get-random-relatif</i><i> (&rarr; Relatif)</i><i> (Integer|Integer Boolean)</i><hr/>
<p class="text">

	The get-random-relatif function returns a n bits random
	positive relatif number. In the first form, the argument is the
	number of bits. In the second form, the first argument is the
	number of bits and the second argument, when true produce an odd
	number, or an even number when false.
      </p>
</div>
<p/>
<div class="frame">
<i>get-random-prime</i><i> (&rarr; Relatif)</i><i> (Integer)</i><hr/>
<p class="text">

	The get-random-prime function returns a n bits random
	positive relatif probable prime number. The argument is the number
	of bits. The prime number is generated by using the Miller-Rabin
	primality test. As such, the returned number is declared probable
	prime. The more bits needed, the longer it takes to generate such
	number.
      </p>
</div>
<p/>
<div class="frame">
<i>get-random-bitset</i><i> (&rarr; Bitset)</i><i> (Integer)</i><hr/>
<p class="text">

	The get-random-bitset function returns a n bits random
	bitset. The argument is the number of bits.
      </p>
</div>
<p/>
<div class="frame">
<i>fermat-p</i><i> (&rarr; Boolean)</i><i> (Integer|Relatif Integer|Relatif)</i><hr/>
<p class="text">

	The fermat-p predicate returns true if the little
	fermat theorem is validated. The first argument is the base number
	and the second argument is the prime number to validate.
      </p>
</div>
<p/>
<div class="frame">
<i>miller-rabin-p</i><i> (&rarr; Boolean)</i><i> (Integer|Relatif Integer|Relatif)</i><hr/>
<p class="text">

	The miller-rabin-p predicate returns true if the
	Miller-Rabin test is validated. The first argument is the base
	number and the second argument is the prime number to validate.
      </p>
</div>
<p/>
<div class="frame">
<i>prime-probable-p</i><i> (&rarr; Boolean)</i><i> (Integer|Relatif [Integer])</i><hr/>
<p class="text">

	The prime-probable-p predicate returns true if
	the argument is a probable prime. In the first form, only an
	integer or relatif number is required. In the second form, the
	number of iterations is specified as the second argument. By
	default, the number of iterations is specified to 56.
      </p>
</div>
<p/>
</body>
</html>
