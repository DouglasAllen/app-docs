<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<!-- afnix web application extension (wax) service -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<!-- page head -->
<head>
<title>
Standard Text Processing Module</title>
<meta http-equiv="context-type" content="text/html; charset=utf-8"/>
<link href="style.css" type="text/css" rel="stylesheet"/>
<meta name="author" content="Amaury Darsch"/>
<meta name="copyright" content="1999-2012"/>
</head>
<!-- page body -->
<body>
<table>
<tr>
<td class="logo">
<img src="afnix.png" alt="AFNIX Writing System" width="120" height="120"/>
</td>
<td class="title">
Standard Text Processing Module</td>
</tr>
</table>
<hr/>
<div class="chapter">
Standard Text Processing Module</div>
<hr/>
<p class="text">
 The <em>Standard Text Processing</em> module is an original implementation of an object collection dedicated to text processing. Although text scaning is the current operation perfomed in the field of text processing, the module provides also specialized object to store and index text data. Text sorting and transliteration is also part of this module. </p>
<div class="section">
Scanning concepts</div>
<p class="text">
 Text scanning is the ability to extract lexical elements or <em>lexemes</em> from a stream. A scanner or lexical analyzer is the principal object used to perform this task. A scanner is created by adding special object that acts as a pattern matcher. When a pattern is matched, a special object called a <em>lexeme</em> is returned. </p>
<p class="subsect">
Pattern object</p>
<p class="text">
 A <tt class="code">Pattern</tt> object is a special object that acts as model for the string to match. There are several ways to build a pattern. The simplest way to build it is with a regular expression. Another type of pattern is a balanced pattern. In its first form, a pattern object can be created with a regular expression object. </p>
<pre class="frame">
<![CDATA[# create a pattern object
const pat (afnix:txt:Pattern "$d+")

]]></pre>
<p class="text">
 In this example, the pattern object is built to detect integer objects. </p>
<pre class="frame">
<![CDATA[pat:check "123" # true
pat:match "123" # 123

]]></pre>
<p class="text">
 The <tt class="code">check</tt> method return true if the input string matches the pattern. The <tt class="code">match</tt> method returns the string that matches the pattern. Since the pattern object can also operates with stream object, the <tt class="code">match</tt> method is appropriate to match a particular string. The pattern object is, as usual, available with the appropriate predicate. </p>
<pre class="frame">
<![CDATA[afnix:txt:pattern-p pat # true

]]></pre>
<p class="text">
 Another form of pattern object is the balanced pattern. A balanced pattern is determined by a starting string and an ending string. There are two types of balanced pattern. One is a single balanced pattern and the other one is the recursive balanced pattern. The single balanced pattern is appropriate for those lexical element that are defined by a character. For example, the classical C-string is a single balanced pattern with the double quote character. </p>
<pre class="frame">
<![CDATA[# create a balanced pattern
const pat (afnix:txt:Pattern "ELEMENT" "<" ">")
pat:check "<xml>" # true
pat:match "<xml>" # xml

]]></pre>
<p class="text">
 In the case of the C-string, the pattern might be more appropriately defined with an additional <em>escape
	character</em>. Such character is used by the pattern matcher to grab characters that might be part of the pattern definition. </p>
<pre class="frame">
<![CDATA[# create a balanced pattern
const pat (afnix:txt:Pattern "STRING" "'" '\\')
pat:check "'hello'" # true
pat:match "'hello'" # "hello"

]]></pre>
<p class="text">
 In this form, a balanced pattern with an escape character is created. The same string is used for both the starting and ending string. Another constructor that takes two strings can be used if the starting and ending strings are different. The last pattern form is the balanced recursive form. In this form, a starting and ending string are used to delimit the pattern. However, in this mode, a recursive use of the starting and ending strings is allowed. In order to have an exact match, the number of starting string must equal the number of ending string. For example, the C-comment pattern can be viewed as recursive balanced pattern. </p>
<pre class="frame">
<![CDATA[# create a c-comment pattern
const pat (afnix:txt:Pattern "STRING" "/*" "*/" )

]]></pre>
<p class="subsect">
Lexeme object</p>
<p class="text">
 The <tt class="code">Lexeme</tt> object is the object built by a scanner that contains the matched string. A lexeme is therefore a tagged string. Additionally, a lexeme can carry additional information like a source name and index. </p>
<pre class="frame">
<![CDATA[# create an empty lexeme
const lexm (afnix:txt:Lexeme)
afnix:txt:lexeme-p lexm # true

]]></pre>
<p class="text">
 The default lexeme is created with any value. A value can be set with the <tt class="code">set-value</tt> method and retrieved with the <tt class="code">get-value</tt> methods. </p>
<pre class="frame">
<![CDATA[lexm:set-value "hello"
lexm:get-value # hello

]]></pre>
<p class="text">
 Similar are the <tt class="code">set-tag</tt> and <tt class="code">get-tag</tt> methods which operate with an integer. The source name and index are defined as well with the same methods. </p>
<pre class="frame">
<![CDATA[# check for the source
lexm:set-source "world"
lexm:get-source # world
# check for the source index
lexm:set-index 2000
lexm:get-index # 2000

]]></pre>
<div class="section">
Text scanning</div>
<p class="text">
 Text scanning is the ability to extract lexical elements or lexemes from an input stream. Generally, the lexemes are the results of a matching operation which is defined by a pattern object. As a result, the definition of a scanner object is the object itself plus one or several pattern object. </p>
<p class="subsect">
Scanner construction</p>
<p class="text">
 By default, a scanner is created without pattern objects. The <tt class="code">length</tt> method returns the number of pattern objects. As usual, a predicate is associated with the scanner object. </p>
<pre class="frame">
<![CDATA[# the default scanner
const  scan (afnix:txt:Scanner)
afnix:txt:scanner-p scan # true
# the length method
scan:length # 0

]]></pre>
<p class="text">
 The scanner construction proceeds by adding pattern objects. Each pattern can be created independently, and later added to the scanner. For example, a scanner that reads real, integer and string can be defined as follow: </p>
<pre class="frame">
<![CDATA[# create the scanner pattern
const REAL    (
  afnix:txt:Pattern "REAL"    [$d+.$d*])
const STRING  (
  afnix:txt:Pattern "STRING"  "&quot;" '\\')
const INTEGER (
  afnix:txt:Pattern "INTEGER" [$d+|"0x"$x+])
# add the pattern to the scanner
scanner:add INTEGER REAL STRING

]]></pre>
<p class="text">
 The order of pattern integration defines the priority at which a token is recognized. The symbol name for each pattern is optional since the functional programming permits the creation of patterns directly. This writing style makes the scanner definition easier to read. </p>
<p class="subsect">
Using the scanner</p>
<p class="text">
 Once constructed, the scanner can be used <em>as is</em>. A stream is generally the best way to operate. If the scanner reaches the end-of-stream or cannot recognize a lexeme, the nil object is returned. With a loop, it is easy to get all lexemes. </p>
<pre class="frame">
<![CDATA[while (trans valid (is:valid-p)) {
  # try to get the lexeme
  trans lexm (scanner:scan is)
  # check for nil lexeme and print the value
  if (not (nil-p lexm)) (println (lexm:get-value))
  # update the valid flag
  valid:= (and (is:valid-p) (not (nil-p lexm)))
}

]]></pre>
<p class="text">
 In this loop, it is necessary first to check for the end of the stream. This is done with the help of the special loop construct that initialize the <tt class="code">valid</tt> symbol. As soon as the the lexeme is built, it can be used. The lexeme holds the value as well as it tag. </p>
<div class="section">
Text sorting</div>
<p class="text">
 Sorting is one the primary function implemented inside the <em>text processing</em> module. There are three sorting functions available in the module. </p>
<p class="subsect">
Ascending and descending order sorting</p>
<p class="text">
 The <tt class="code">sort-ascent</tt> function operates with a vector object and sorts the elements in ascending order. Any kind of objects can be sorted as long as they support a comparison method. The elements are sorted in placed by using a <em>quick
	sort</em> algorithm. </p>
<pre class="frame">
<![CDATA[# create an unsorted vector
const v-i (Vector 7 5 3 4 1 8 0 9 2 6)
# sort the vector in place
afnix:txt:sort-ascent v-i
# print the vector
for (e) (v) (println e)

]]></pre>
<p class="text">
 The <tt class="code">sort-descent</tt> function is similar to the <tt class="code">sort-ascent</tt> function except that the object are sorted in descending order. </p>
<p class="subsect">
Lexical sorting</p>
<p class="text">
 The <tt class="code">sort-lexical</tt> function operates with a vector object and sorts the elements in ascending order using a lexicographic ordering relation. Objects in the vector must be literal objects or an exception is raised. </p>
<div class="section">
Transliteration</div>
<p class="text">
 Transliteration is the process of changing characters my mapping one to another one. The transliteration process operates with a character source and produces a target character with the help of a mapping table. The transliteration process is not necessarily reversible as often indicated in the literature. </p>
<p class="subsect">
Literate object</p>
<p class="text">
 The <tt class="code">Literate</tt> object is a transliteration object that is bound by default with the identity function mapping. As usual, a predicate is associate with the object. </p>
<pre class="frame">
<![CDATA[# create a transliterate object
const tl (afnix:txt:Literate)
# check the object
afnix:txt:literate-p tl # true

]]></pre>
<p class="text">
 The transliteration process can also operate with an escape character in order to map double character sequence into a single one, as usually found inside programming language. </p>
<pre class="frame">
<![CDATA[# create a transliterate object by escape
const tl (afnix:txt:Literate '\\')

]]></pre>
<p class="subsect">
Transliteration configuration</p>
<p class="text">
 The <tt class="code">set-map</tt> configures the transliteration mapping table while the <tt class="code">set-escape-map</tt> configure the escape mapping table. The mapping is done by setting the source character and the target character. For instance, if one want to map the tabulation character to a white space, the mapping table is set as follow: </p>
<pre class="frame">
<![CDATA[tl:set-map '\t' ' '

]]></pre>
<p class="text">
 The escape mapping table operates the same way. It should be noted that the mapping algorithm translate first the input character, eventually yielding to an escape character and then the escape mapping takes place. Note also that the <tt class="code">set-escape</tt> method can be used to set the escape character. </p>
<pre class="frame">
<![CDATA[tl:set-map '\t' ' '

]]></pre>
<p class="subsect">
Transliteration process</p>
<p class="text">
 The transliteration process is done either with a string or an input stream. In the first case, the <tt class="code">translate</tt> method operates with a string and returns a translated string. On the other hand, the <tt class="code">read</tt> method returns a character when operating with a stream. </p>
<pre class="frame">
<![CDATA[# set the mapping characters
tl:set-map '\h' '\w'
tl:set-map '\e' '\o'
tl:set-map '\l' '\r'
tl:set-map '\o' '\d'
# translate a string
tl:translate "helo" # word

]]></pre>
<hr/>
<div class="appendix">
Standard Text Processing Reference</div>
<hr/>
<p/>
<div class="elem">
Pattern</div>
<p class="text">
 The <tt class="code">Pattern</tt> class is a pattern matching class based either on regular expression or balanced string. In the regex mode, the pattern is defined with a regex and a matching is said to occur when a regex match is achieved. In the balanced string mode, the pattern is defined with a start pattern and end pattern strings. The balanced mode can be a single or recursive. Additionally, an escape character can be associated with the class. A name and a tag is also bound to the pattern object as a mean to ease the integration within a scanner. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>pattern-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Object
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>Pattern</i><i> (none)</i><hr/>
<p class="text">

	  The Pattern constructor creates an empty pattern.
	</p>
</div>
<p/>
<div class="frame">
<i>Pattern</i><i> (String|Regex)</i><hr/>
<p class="text">

	  The Pattern constructor creates a pattern object
	  associated with a regular expression. The argument can be either
	  a string or a regular expression object. If the argument is a
	  string, it is converted into a regular expression object.
	</p>
</div>
<p/>
<div class="frame">
<i>Pattern</i><i> (String String)</i><hr/>
<p class="text">

	  The Pattern constructor creates a balanced
	  pattern. The first argument is the start pattern string. The
	  second argument is the end balanced string.
	</p>
</div>
<p/>
<div class="frame">
<i>Pattern</i><i> (String String Character)</i><hr/>
<p class="text">

	  The Pattern constructor creates a balanced
	  pattern with an escape character. The first argument is
	  the start pattern string. The second argument is the end
	  balanced string. The third character is the escape
	  character.
	</p>
</div>
<p/>
<div class="frame">
<i>Pattern</i><i> (String String Boolean)</i><hr/>
<p class="text">

	  The Pattern constructor creates a recursive balanced
	  pattern. The first argument is the start pattern string. The
	  second argument is the end balanced string.
	</p>
</div>
<p/>
<p class="elem">
Constants</p>
<div class="frame">
<i>REGEX</i><hr/>
<p class="text">

	  The REGEX constant indicates that the pattern is a
	  regular expression.
	</p>
</div>
<p/>
<div class="frame">
<i>BALANCED</i><hr/>
<p class="text">

	  The BALANCED constant indicates that the pattern is a
	  balanced pattern.
	</p>
</div>
<p/>
<div class="frame">
<i>RECURSIVE</i><hr/>
<p class="text">

	  The RECURSIVE constant indicates that the pattern is a
	  recursive balanced pattern.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>check</i><i> (&rarr; Boolean)</i><i> (String)</i><hr/>
<p class="text">

	  The check method checks the pattern against the
	  input string. If the verification is successful, the method
	  returns true, false otherwise.
	</p>
</div>
<p/>
<div class="frame">
<i>match</i><i> (&rarr; String)</i><i> (String|InputStream)</i><hr/>
<p class="text">

	  The match method attempts to match an input string
	  or an input stream. If the matching occurs, the matching string
	  is returned. If the input is a string, the end of string is used
	  as an end condition. If the input stream is used, the end of
	  stream is used as an end condition.
	</p>
</div>
<p/>
<div class="frame">
<i>set-tag</i><i> (&rarr; none)</i><i> (Integer)</i><hr/>
<p class="text">

	  The set-tag method sets the pattern tag. The tag
	  can be further used inside a scanner.
	</p>
</div>
<p/>
<div class="frame">
<i>get-tag</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The get-tag method returns the pattern tag.
	</p>
</div>
<p/>
<div class="frame">
<i>set-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-name method sets the pattern name. The name
	  is symbol identifier for that pattern.
	</p>
</div>
<p/>
<div class="frame">
<i>get-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-name method returns the pattern name.
	</p>
</div>
<p/>
<div class="frame">
<i>set-regex</i><i> (&rarr; none)</i><i> (String|Regex)</i><hr/>
<p class="text">

	  The set-regex method sets the pattern regex either
	  with a string or with a regex object. If the method is
	  successfully completed, the pattern type is switched to the REGEX type.
	</p>
</div>
<p/>
<div class="frame">
<i>set-escape</i><i> (&rarr; none)</i><i> (Character)</i><hr/>
<p class="text">

	  The set-escape method sets the pattern escape
	  character. The escape character is used only in balanced mode.
	</p>
</div>
<p/>
<div class="frame">
<i>get-escape</i><i> (&rarr; Character)</i><i> (none)</i><hr/>
<p class="text">

	  The get-escape method returns the escape character.
	</p>
</div>
<p/>
<div class="frame">
<i>set-balanced</i><i> (&rarr; none)</i><i> (String| String String)</i><hr/>
<p class="text">

	  The set-balanced method sets the pattern balanced
	  string. With one argument, the same balanced string is used for
	  starting and ending. With two arguments, the first argument is
	  the starting string and the second is the ending string.
	</p>
</div>
<p/>
<p/>
<div class="elem">
Lexeme</div>
<p class="text">
 The <tt class="code">Lexeme</tt> class is a literal object that is designed to hold a matching pattern. A lexeme consists in string (i.e. the lexeme value), a tag and eventually a source name (i.e. file name) and a source index (line number). </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>lexeme-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Literal
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>Lexeme</i><i> (none)</i><hr/>
<p class="text">

	  The Lexeme constructor creates an empty lexeme.
	</p>
</div>
<p/>
<div class="frame">
<i>Lexeme</i><i> (String)</i><hr/>
<p class="text">

	  The Lexeme constructor creates a lexeme by
	  value. The string argument is the lexeme value.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-tag</i><i> (&rarr; none)</i><i> (Integer)</i><hr/>
<p class="text">

	  The set-tag method sets the lexeme tag. The tag can
	  be further used inside a scanner.
	</p>
</div>
<p/>
<div class="frame">
<i>get-tag</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The get-tag method returns the lexeme tag.
	</p>
</div>
<p/>
<div class="frame">
<i>set-value</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-value method sets the lexeme value. The
	  lexeme value is generally the result of a matching operation. 
	</p>
</div>
<p/>
<div class="frame">
<i>get-value</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-value method returns the lexeme value.
	</p>
</div>
<p/>
<div class="frame">
<i>set-index</i><i> (&rarr; none)</i><i> (Integer)</i><hr/>
<p class="text">

	  The set-index method sets the lexeme source
	  index. The lexeme source index can be for instance the source
	  line number.
	</p>
</div>
<p/>
<div class="frame">
<i>get-index</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The get-index method returns the lexeme source index.
	</p>
</div>
<p/>
<div class="frame">
<i>set-source</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-source method sets the lexeme source
	  name. The lexeme source name can be for instance the source file
	  name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-source</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-source method returns the lexeme source
	  name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
Scanner</div>
<p class="text">
 The <tt class="code">Scanner</tt> class is a text scanner or <em>lexical
      analyzer</em> that operates on an input stream and permits to match one or several patterns. The scanner is built by adding patterns to the scanner object. With an input stream, the scanner object attempts to build a buffer that match at least one pattern. When such matching occurs, a lexeme is built. When building a lexeme, the pattern tag is used to mark the lexeme. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>scanner-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Object
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>Scanner</i><i> (none)</i><hr/>
<p class="text">

	  The Scanner constructor creates an empty scanner.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>add</i><i> (&rarr; none)</i><i> (Pattern*)</i><hr/>
<p class="text">

	  The add method adds 0 or more pattern objects to
	  the scanner. The priority of the pattern is determined by the
	  order in which the patterns are added.
	</p>
</div>
<p/>
<div class="frame">
<i>length</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The length method returns the number of pattern
	  objects in this scanner.
	</p>
</div>
<p/>
<div class="frame">
<i>get</i><i> (&rarr; Pattern)</i><i> (Integer)</i><hr/>
<p class="text">

	  The get method returns a pattern object by index.
	</p>
</div>
<p/>
<div class="frame">
<i>check</i><i> (&rarr; Lexeme)</i><i> (String)</i><hr/>
<p class="text">

	  The check method checks that a string is matched by the
	  scanner and returns the associated lexeme.
	</p>
</div>
<p/>
<div class="frame">
<i>scan</i><i> (&rarr; Lexeme)</i><i> (InputStream)</i><hr/>
<p class="text">

	  The scan method scans an input stream until a
	  pattern is matched. When a matching occurs, the associated
	  lexeme is returned.
	</p>
</div>
<p/>
<p/>
<div class="elem">
Literate</div>
<p class="text">
 The <tt class="code">Literate</tt> class is transliteration mapping class. Transliteration is the process of changing characters my mapping one to another one. The transliteration process operates with a character source and produces a target character with the help of a mapping table. This transliteration object can also operate with an escape table. In the presence of an escape character, an escape mapping table is used instead of the regular one. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>literate-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Object
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>Literate</i><i> (none)</i><hr/>
<p class="text">

	  The Literate constructor creates a default
	  transliteration object.
	</p>
</div>
<p/>
<div class="frame">
<i>Literate</i><i> (Character)</i><hr/>
<p class="text">

	  The Literate constructor creates a default
	  transliteration object with an escape character. The
	  argument is the escape character.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>read</i><i> (&rarr; Character)</i><i> (InputStream)</i><hr/>
<p class="text">

	  The read method reads a character from the input
	  stream and translate it with the help of the mapping table. A
	  second character might be consumed from the stream if the first
	  character is an escape character.
	</p>
</div>
<p/>
<div class="frame">
<i>getu</i><i> (&rarr; Character)</i><i> (InputStream)</i><hr/>
<p class="text">

	  The getu method reads a Unicode character from the input
	  stream and translate it with the help of the mapping table. A
	  second character might be consumed from the stream if the first
	  character is an escape character.
	</p>
</div>
<p/>
<div class="frame">
<i>reset</i><i> (&rarr; none)</i><i> (none)</i><hr/>
<p class="text">

	  The reset method resets all the mapping table and
	  install a default identity one.
	</p>
</div>
<p/>
<div class="frame">
<i>set-map</i><i> (&rarr; none)</i><i> (Character Character)</i><hr/>
<p class="text">

	  The set-map method set the mapping table by using a
	  source and target character. The first character is the source
	  character. The second character is the target character.
	</p>
</div>
<p/>
<div class="frame">
<i>get-map</i><i> (&rarr; Character)</i><i> (Character)</i><hr/>
<p class="text">

	  The get-map method returns the mapping character by
	  character. The source character is the argument.
	</p>
</div>
<p/>
<div class="frame">
<i>translate</i><i> (&rarr; String)</i><i> (String)</i><hr/>
<p class="text">

	  The translate method translate a string by
	  transliteration and returns a new string.
	</p>
</div>
<p/>
<div class="frame">
<i>set-escape</i><i> (&rarr; none)</i><i> (Character)</i><hr/>
<p class="text">

	  The set-escape method set the escape character.
	</p>
</div>
<p/>
<div class="frame">
<i>get-escape</i><i> (&rarr; Character)</i><i> (none)</i><hr/>
<p class="text">

	  The get-escape method returns the escape character.
	</p>
</div>
<p/>
<div class="frame">
<i>set-escape-map</i><i> (&rarr; none)</i><i> (Character Character)</i><hr/>
<p class="text">

	  The set-escape-map method set the escape mapping
	  table by using a source and target character. The first
	  character is the source character. The second character is the
	  target character.
	</p>
</div>
<p/>
<div class="frame">
<i>get-escape-map</i><i> (&rarr; Character)</i><i> (Character)</i><hr/>
<p class="text">

	  The get-escape-map method returns the escape
	  mapping character by character. The source character is the
	  argument.
	</p>
</div>
<p/>
<p class="elem">
Functions</p>
<div class="frame">
<i>sort-ascent</i><i> (&rarr; none)</i><i> (Vector)</i><hr/>
<p class="text">

	The sort-ascent function sorts in ascending order the
	vector argument. The vector is sorted in place.
      </p>
</div>
<p/>
<div class="frame">
<i>sort-descent</i><i> (&rarr; none)</i><i> (Vector)</i><hr/>
<p class="text">

	The sort-descent function sorts in descending order the
	vector argument. The vector is sorted in place.
      </p>
</div>
<p/>
<div class="frame">
<i>sort-lexical</i><i> (&rarr; none)</i><i> (Vector)</i><hr/>
<p class="text">

	The sort-lexical function sorts in lexicographic
	order the vector argument. The vector is sorted in place.
      </p>
</div>
<p/>
</body>
</html>
