<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<!-- afnix web application extension (wax) service -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<!-- page head -->
<head>
<title>
Standard XML Module</title>
<meta http-equiv="context-type" content="text/html; charset=utf-8"/>
<link href="style.css" type="text/css" rel="stylesheet"/>
<meta name="author" content="Amaury Darsch"/>
<meta name="copyright" content="1999-2012"/>
</head>
<!-- page body -->
<body>
<table>
<tr>
<td class="logo">
<img src="afnix.png" alt="AFNIX Writing System" width="120" height="120"/>
</td>
<td class="title">
Standard XML Module</td>
</tr>
</table>
<hr/>
<div class="chapter">
Standard XML Module</div>
<hr/>
<p class="text">
 The <em>Standard XML</em> module is an original implementation of the XML markup language. The module provides the necessary objects for parsing a xml description as well as manipulating the parsed tree. The module can be extended to a service as a mean to act as a XML processor. The module also provides the support for a <em>simple
    model</em> which enable the quick parsing of documents with a relaxed rule checking approach. </p>
<div class="section">
XML tree representation</div>
<p class="text">
 A xml document is represented with a tree. At the top of the tree is the <tt class="code">XmlRoot</tt> object. The root object is not part of the document, but acts as the primary container for other objects. A xml document starts with a root node and all other child elements are <tt class="code">XmlNode</tt> objects. </p>
<p class="subsect">
Node base object</p>
<p class="text">
 The xml tree is built with the <tt class="code">XmlNode</tt> object. The node object has different derivation depending on the required representation. For example, the <tt class="code">XmlRoot</tt> object is derived from the <tt class="code">XmlNode</tt> object. A node object can have child object unless the node is marked as an <em>empty
	node</em>. Trying to add node to an empty node results in an exception. A node can also be marked empty by the user. This situation typically arises with tag node which are used alone such like the <em>&lt;br/&gt;</em> xhtml empty tag or an empty paragraph <em>&lt;p/&gt;</em>. Although a xml node cannot be constructed directly, there is a predicate <tt class="code">node-p</tt> that can be used to assert the node type. </p>
<pre class="frame">
<![CDATA[# check a node
assert true (afnix:xml:node-p node)

]]></pre>
<p class="text">
 The <tt class="code">add-child</tt> method adds a child node to the calling node. If the calling node is marked empty, an exception is raised when attempting to add the node. There is no limit for the number of nodes to add. In particular, when a text is to be added, care should be taken that there is no markup within that text. In doubt, the <tt class="code">parse</tt> method should be used. </p>
<pre class="frame">
<![CDATA[# parse a text and add 3 child nodes
p:parse "The quick brown <b>fox</b> 
jumps over the lazy dog"

]]></pre>
<p class="text">
 In the previous example, the first child node is a <tt class="code">XmlText</tt> node with the value <em>The quick brown
	</em>. The second node is a <tt class="code">XmlTag</tt> node with name <em>b</em>. Finally, the third node is also a <tt class="code">XmlText</tt> node with the value <em> jumps over the
	lazy dog</em>. It should be noted that the tag node has a child <tt class="code">XmlText</tt> node with the value <em>fox</em>. This example also illustrates the power of the <tt class="code">parse</tt> method which considerably simplify the creation of a xml tree. Finally, there is a subtle subject to be treated later which concerns the use of <em>character reference</em> with the <tt class="code">parse</tt> method. Like any other xml parser, character references are evaluated during the parsing phase, thus providing no mechanism to create such reference. For this reason, a special class called <tt class="code">XmlCref</tt> is provided in the module. </p>
<p class="subsect">
Tag object</p>
<p class="text">
 The <tt class="code">XmlTag</tt> class is one of the most important class as it holds most of the xml constructs. A tag is defined by a name, a set of attributes and eventually a content. In its simplest form, a tag is created by name. With an additional boolean parameter, the tag can be marked as an empty node. </p>
<pre class="frame">
<![CDATA[# create an empty paragraph tag
const p (afnix:xml:XmlTag "p" true)

]]></pre>
<p class="text">
 Adding attributes to a tag is imply a matter of method call. The <tt class="code">add-attribute</tt> method operates with a <tt class="code">Property</tt> object while the <tt class="code">set-attribute</tt> operates with a name and a literal value. As a matter of fact, the attributes are stored internally as a property list. </p>
<pre class="frame">
<![CDATA[# <p class="text">
# create a paragraph tag
const p (afnix:xml:XmlTag "p")
# set the class attribute
p:set-attribute "class" "text"

]]></pre>
<p class="text">
 The node empty flag determines whether or not there is a end tag associated with a tag. If the empty flag is false, the node can have children nodes and is associated with a end tag. With the empty flag set, there is no child nodes. Such situation corresponds to the xml <em>/&gt;</em> notation. </p>
<pre class="frame">
<![CDATA[# <br/>
# create a br empty tag
const br (afnix:xml:XmlTag "br" true)

]]></pre>
<p class="subsect">
Text objects</p>
<p class="text">
 The xml module provides two types of xml text node. The basic object is the <tt class="code">XmlText</tt> node which is designed to hold some text without markup. It is this kind of nodes which is automatically instantiated by the <tt class="code">parse</tt> method, as described earlier. The other object is the <tt class="code">XmlData</tt> which corresponds to the xml <em>CDATA</em> special markup. With a character data node, the characters are not interpreted, including those that indicate markup starts like <em>&lt;</em> or end like <em>&gt;</em>. The <tt class="code">XmlData</tt> is particularly used to store scripts or other <em>program text</em> inside a xml description. As an example, it is recommended to use a character data node inside a script tag with xhtml. </p>
<div class="section">
Document reading</div>
<p class="text">
 A xml document is read by scanning an input stream an building a representation of the xml tree. </p>
<p class="subsect">
The document object</p>
<p class="text">
 The <tt class="code">XmlDocument</tt> object is a special object is designed to ease the reading process of an xml document. The process of creating a xml document consists of creating a document object, then binding a xml reader, parsing the input stream and finally storing the root node. When the operation is completed, the root node is available in the document object. </p>
<pre class="frame">
<![CDATA[# create a xml document
const xdoc (afnix:xml:XmlDocument "example.xml")
# get the root node
const rppt (xdoc:get-root)

]]></pre>
<p class="subsect">
The root node content</p>
<p class="text">
 When a document is parsed, the root node holds all the elements and markup sequentially. At this stage, it shall be noted that the element data are not expanded. Unlike a normal XML reader, the parameter entity are kept in the node data, are expended later by the XML processor. </p>
<div class="section">
Node tree operations</div>
<p class="text">
 The class <tt class="code">XneTree</tt> provides a single framework to operate on a node and its associated tree. Since a node always carries a sub-tree, the <em>node tree</em> term will be used to reference it. </p>
<p class="subsect">
Creating a node tree</p>
<p class="text">
 A node tree is created either from a node at construction or with the help of the <tt class="code">set-node</tt> method. </p>
<pre class="frame">
<![CDATA[# create a node tree at construction
const tree (afnix:xml:XneTree root)
# change the node tree
tree:set-node node

]]></pre>
<p class="text">
 Once a tree is created, various methods are provided to operate on the whole tree. The <tt class="code">depth</tt> method returns the depth of the node tree. The <tt class="code">get-node</tt> methods returns the the node associated with the tree. </p>
<pre class="frame">
<![CDATA[# get the tree depth
println (tree:depth)

]]></pre>
<p class="subsect">
Namespace operations</p>
<p class="text">
 The concept of <em>namespace</em> is an extension to the xml standard. Unlike other programming language, the concept of namespace is designed to establish a binding between a name and an uri. Such binding permits to establish a scope for tags without too much burden. In the xml namespace terminology, an <em>expanded name</em> is composed of a <em>prefix</em> and a <em>local name</em>. The basic operations provided at the tree level is the prefix cancellation and the tree prefix setting. </p>
<pre class="frame">
<![CDATA[# clear the prefix for the whole tree
tree:clear-prefix
# set a prefix for the whole tree
tree:set-prefix "afnix"

]]></pre>
<p class="text">
 The <tt class="code">set-prefix</tt> changes the prefix for the whole tree. It is not necessary to clear first the prefix. </p>
<p class="subsect">
Attribute operations</p>
<p class="text">
 Each node in the node tree can have its attribute list modified in a single operation. The first operation is to clear all attributes for all nodes. Although this operation might be useful, it should be carried with caution. The attributes can also cleared more selectively by using the tag name as a filter. For more complex operation, the <tt class="code">clear-attribute</tt> method of the <tt class="code">XmlTag</tt> is the definitive answer. </p>
<pre class="frame">
<![CDATA[# clear all attributes
tree:clear-attribute
# clear all attributes by tag name
tree:clear-attribute "p"

]]></pre>
<p class="text">
 The <tt class="code">set-attribute</tt> method sets an attribute to the whole tree. The first argument is the attribute name and the second is a literal value. For more selective operations, the <tt class="code">set-attribute</tt> method can be also called at the tag level. </p>
<pre class="frame">
<![CDATA[# clear all attributes
tree:set-attribute "class" "text"

]]></pre>
<p class="text">
 When it comes to set attributes, there is a special operation related to the "id" attribute. Such attribute is supposed to be unique for the whole tree. For this reason, the <tt class="code">generate-id</tt> generates a unique id for each node and assign the id attribute. The attribute is unique at the time of the call. If the tree is modified, and in particular, if new node are added, the method must be called again to regenerate the node id. </p>
<pre class="frame">
<![CDATA[# set a unique id for all nodes
tree:generate-id

]]></pre>
<div class="section">
Node location and searching</div>
<p class="text">
 The node location is the ability to locate one or several nodes in a xml tree. A node is generally located by name, path or id. Once a node has been located, it can be processed. Note that the node locator operates operates almost exclusively with <tt class="code">XmlTag</tt> node, although it might not be always the case. </p>
<p class="subsect">
Node selection</p>
<p class="text">
 The process of finding a child node is obtained with the help of the <tt class="code">XneCond</tt> class combined with the <tt class="code">select</tt> method of the <tt class="code">XneTree</tt> Object. The <tt class="code">select</tt> method traverses the whole tree and attempts to match a condition for each node. If the condition is evaluated successfully for a node, the node is added in the result vector. Note that the tree can be traversed entirely or with only the first layer of children. </p>
<pre class="frame">
<![CDATA[# creating a condition node
const xcnd (afnix:xml:XneCond)
# create a tree with a root node
const tree (afnix:xml:XneTree root)
# select all nodes for that condition
trans result (tree:select xcnd)

]]></pre>
<p class="text">
 In the previous example, the condition object is empty. This means that there is no condition, and thus works for all nodes. This previous example will return all nodes in the tree. </p>
<p class="subsect">
Node condition</p>
<p class="text">
 The <tt class="code">XmlCond</tt> class provides several method to add a conditions. The <tt class="code">add</tt> method is the method of choice to add a condition. The method operates with a condition type and a literal. Note that the object can contain several conditions. </p>
<pre class="frame">
<![CDATA[# creating a condition node
const xcnd (afnix:xml:XneCond)
# add a condition by name
xcnd:add afnix:xml:xne:NAME "p"

]]></pre>
<p class="text">
 In the previous example, a condition is designed to operate with a tag name. Upon a call to the <tt class="code">select</tt> method with this condition, all nodes in the tree that have the tag name <em>p</em> will be selected. </p>
<pre class="frame">
<![CDATA[# creating a condition node
const xcnd (afnix:xml:XneCond)
# add a condition by name
xcnd:add afnix:xml:xne:NAME "p"
# add an index condition
xcnd:add afnix:xml:xne:INDEX 0

]]></pre>
<p class="text">
 In the previous example, a condition is designed to operate with a tag name and index. Upon a call to the <tt class="code">select</tt> method with this condition, all nodes in the tree that have the tag name <em>p</em> and those child index is 0 will be selected. </p>
<p class="subsect">
Selection result</p>
<p class="text">
 The node selection operates by default on the whole tree. The <tt class="code">select</tt> method, when called with a second boolean argument can restrict the search to the child nodes. </p>
<pre class="frame">
<![CDATA[# creating a condition node
const xcnd (afnix:xml:XneCond)
# create a tree with a root node
const tree (afnix:xml:XneTree root)
# select all nodes for that condition
trans result (tree:select xcnd false)

]]></pre>
<p class="text">
 The selection results is stored in a vector object. The node order corresponds to the tree order obtained with a depth first search approach. </p>
<div class="section">
Simple model node</div>
<p class="text">
 The XML simple model is designed to simplify the interpretation of a general sgml document such like, html or xhtml document. In the simple model approach, there is no tree. Instead, a vector of simple nodes is built, and a document interface can be used to access the nodes. Therefore, this simple model should be considered as a mean to quickly parse document, but should not be used when tree operations come into play. In such case, the xml model is by far more appropriate. The simple model can be used to parse a html document for instance. Note also that the simple model is a relaxed model in terms of parsing rules. For example, the tag start/end consistency is not checked and the attribute parsing is not aggressive as it can be found generally in poorly written html document. </p>
<p class="text">
 In the simple model, a <tt class="code">XsmNode</tt> is just a text place holder. The node transports its type which can be either text, tag, reference of end node. For the tag node, a subtype that identifies reserved nodes versus normal type is also available. </p>
<p class="subsect">
Creating a node</p>
<p class="text">
 A xsm node is created by name or byte and name. In the first case, the node is a text node. In the second case, the node subtype is automatically detected for tag node. </p>
<pre class="frame">
<![CDATA[# create a xsm text node
const ntxt (afnix:xml:XsmNode "afnix">
  # create a xsm tag node
  const ntag (
    afnix:xml:XsmNode afnix:xml:XsmNode:TAG "afnix">

]]></pre>
<p class="text">
 Note that the text corresponds to the node content. For example, the string "!-- example --" might corresponds to a comment in html which is to say a reserved tag when the type is tag or a simple text if the type is a text node. A reserved tag is defined by a string which start either with the '!' character or the '[' character. </p>
<pre class="frame">
<![CDATA[# create a reserved tag
const rtag (
  afnix:xml:XsmNode afnix:xml:XsmNode:TAG 
  "!-- example --")

]]></pre>
<p class="subsect">
Node representation</p>
<p class="text">
 The xsm node is a literal node. This means that the <tt class="code">to-string</tt> and <tt class="code">to-literal</tt> methods are available. When the <tt class="code">to-literal</tt> method is called, the node text is automatically formatted to reflect the node type. </p>
<pre class="frame">
<![CDATA[# create a reserved tag
const rtag (
  afnix:xml:XsmNode afnix:xml:XsmNode:TAG
  "!-- example --")
# print the node literal
rtag:to-literal # <!-- example -->
]]></pre>
<p class="text">
 If the node is a reference node, the node literal is represented with the original definition while the <tt class="code">to-string</tt> method will produce the corresponding character if it known. </p>
<p class="subsect">
Node information</p>
<p class="text">
 With a xsm node, the operation are a limited number of <em>node
	information</em> operations. The <tt class="code">get-name</tt> method returns the first name found in a node. If the node is a normal tag, the <tt class="code">get-name</tt> will return the tag name. For the other node, the method will return the first available string. This also means, that the method will behave correctly with end tag node. </p>
<pre class="frame">
<![CDATA[# create a tag node
const ntag (
  afnix:xml:XsmNode afnix:xml:XsmNode:TAG "afnix">
  # get the tag name
  ntag:get-name

]]></pre>
<p class="text">
 There is a predicate for all types. For example, the <tt class="code">text-p</tt> predicate returns true if the node is a text node. The <tt class="code">tag-p</tt> predicate returns true if the node is a normal or reserved tag. </p>
<div class="section">
Document reading</div>
<p class="text">
 A document is read in a way similar to the <tt class="code">XmlDocument</tt> with the help of the <tt class="code">XsmDocument</tt> object. Once created, the document holds a vector of nodes. </p>
<p class="subsect">
The document object</p>
<p class="text">
 The <tt class="code">XsmDocument</tt> object is a special xsm object designed to ease the reading process of a document. The process of creating a document consists of creating a document object, then binding a xsm reader, parsing the input stream and storing the nodes in a vector. When the operation is completed, the vector can be accessed by index. </p>
<pre class="frame">
<![CDATA[# create a xms document
const xdoc (afnix:xml:XsmDocument "example.htm")
# get the document length
xdoc:length

]]></pre>
<p class="subsect">
Node information object</p>
<p class="text">
 The <tt class="code">XsoInfo</tt> object is a node information object designed to hold a node name, an attributes list and eventually a text associated with the node. For example, if a html document contains a anchor node, the associated information node, will have the anchoring text stored as the node information text. </p>
<pre class="frame">
<![CDATA[# create a xso node by name and text
const info (afnix:xml:XsoInfo "a" "click here")

]]></pre>
<p class="subsect">
Simple model operations</p>
<p class="text">
 The <tt class="code">XsmDocument</tt> is designed to perform simple operations such like searching all nodes that matches a particular name. While this operation can be done easily, it is done in such a way that a vector of <em>node information</em> is returned instead of a vector of nodes which can always be constructed with a simple loop. </p>
<pre class="frame">
<![CDATA[# create a xsm document
const xdoc (afnix:xml:XsmDocument "example.htm")
# get all node named "a" - forcing lower case
xdoc:get-info-vector "a" true

]]></pre>
<hr/>
<div class="appendix">
Standard XML Reference</div>
<hr/>
<p/>
<div class="elem">
XmlNode</div>
<p class="text">
 The <tt class="code">XmlNode</tt> class is the base class used to represent the xml tree. The tree is built as a vector of nodes. Each node owns as well its parent node. Walking in the tree is achieved by taking the child node and then moving to the child and/or next node. The node also manages an empty flags. It the empty flag is set, it is an error to add child nodes. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>node-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Object
</i>
</pre>
<p class="elem">
Methods</p>
<div class="frame">
<i>to-text</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The to-text method returns a text representation of
	  the tree content. Unlike the write method, the tag are not
	  generated, but rather the text content is accumulated. This
	  method is useful tor read the node content. If a node does not
	  have text, the nil string is returned.
	</p>
</div>
<p/>
<div class="frame">
<i>write</i><i> (&rarr; none)</i><i> (none|OutputStream|Buffer)</i><hr/>
<p class="text">

	  The write method write the node contents as well as
	  the child nodes to an output stream argument or a buffer. When
	  node is written, the method attempts to use the stream encoding
	  in such way that the contents fits into the requested output
	  encoding. Without argument, the node is written to the
	  interpreter output stream. with one argument, the node is
	  written to the specified stream or buffer.
	</p>
</div>
<p/>
<div class="frame">
<i>name-p</i><i> (&rarr; Boolean)</i><i> (String)</i><hr/>
<p class="text">

	  The name-p predicate checks if the name matches the
	  node name. Care should be taken that not all node have a name,
	  and in such case, the false value is returned. This method is
	  useful when the node is a tag.
	</p>
</div>
<p/>
<div class="frame">
<i>attribute-p</i><i> (&rarr; Boolean)</i><i> (String| String String)</i><hr/>
<p class="text">

	  The attribute-p predicate checks if there is a node
	  attribute that matches the string argument name. In the first
	  form, the predicate returns true is an attribute exists with the
	  name argument. In the second form, the predicate returns true if
	  the attribute name and value matches the arguments. The first
	  argument is the attribute name. The second argument is the
	  attribute value. Not all nodes have attributes. In such case, the
	  predicate always returns false.
	</p>
</div>
<p/>
<div class="frame">
<i>parse</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The parse method parses the string argument and
	  adds the results as a set of child node to the calling node. If
	  the node is an empty node, the method will almost fail. This
	  method should be used when an attempt is made to add some text
	  that may contain some xml tags.
	</p>
</div>
<p/>
<div class="frame">
<i>get-parent</i><i> (&rarr; XmlNode)</i><i> (none)</i><hr/>
<p class="text">

	  The get-parent method returns the parent node. If
	  the node is the root node, nil is returned.
	</p>
</div>
<p/>
<div class="frame">
<i>set-parent</i><i> (&rarr; none)</i><i> (XmlNode)</i><hr/>
<p class="text">

	  The set-parent method sets the parent node.
	</p>
</div>
<p/>
<div class="frame">
<i>copy</i><i> (&rarr; XmlNode)</i><i> (none)</i><hr/>
<p class="text">

	  The copy method copy the node tree by regenerating 
	  a new tree.
	</p>
</div>
<p/>
<div class="frame">
<i>del-child</i><i> (&rarr; none)</i><i> (Integer | String | String String | String String String)</i><hr/>
<p class="text">

	  The del-child method deletes one or several
	  child nodes. In the first form, the children is deleted
	  either by index or by name. When a string argument is used,
	  several node might be removed. In the second form, the child
	  node name and attribute name must be matched. In the third
	  form, the child node name, attribute name and value must be
	  matched.
	</p>
</div>
<p/>
<div class="frame">
<i>del-attribute-child</i><i> (&rarr; none)</i><i> (String | String String)</i><hr/>
<p class="text">

	  The del-attribute-child method deletes one or several
	  child nodes. In the first form, the children are deleted
	  by attribute name. In the second form, the children are
	  delete by attribute name and value.
	</p>
</div>
<p/>
<div class="frame">
<i>clear-child</i><i> (&rarr; none)</i><i> (none)</i><hr/>
<p class="text">

	  The clear-child method clear the child node list,
	  leaving the node without child node.
	</p>
</div>
<p/>
<div class="frame">
<i>add-child</i><i> (&rarr; none)</i><i> (XmlNode|XmlNode Integer)</i><hr/>
<p class="text">

	  The add-child method adds a node argument as a
	  child node to the calling node. In the first form, the node is
	  added at the end of the node list. In the second form, the node
	  is added by index and all subsequent nodes are shifted by one
	  position.
	</p>
</div>
<p/>
<div class="frame">
<i>get-child</i><i> (&rarr; XmlNode)</i><i> (Integer String)</i><hr/>
<p class="text">

	  The get-child method returns a child node by index or
	  by name. If the calling argument is an integer, the node is
	  returned by index. If the calling argument is a string, the node
	  is returned by name. If the node cannot be found, nil is returned
	  raised.
	</p>
</div>
<p/>
<div class="frame">
<i>get-index</i><i> (&rarr; Integer)</i><i> (XmlNode)</i><hr/>
<p class="text">

	  The gett-index method returns a child node
	  index. The node argument is the node to find as a child node. If
	  the node is not found, an exception is raised.
	</p>
</div>
<p/>
<div class="frame">
<i>merge</i><i> (&rarr; none)</i><i> (XmlNode Integer)</i><hr/>
<p class="text">

	  The merge method merge an existing node with
	  another one. The first argument is the source node used for
	  merging. The second argument  the child node index to merge. The
	  method operates by first removing the child node at the specified
	  index and then add in position, the child nodes of the source node.
	</p>
</div>
<p/>
<div class="frame">
<i>nil-child-p</i><i> (&rarr; Boolean)</i><i> (none)</i><hr/>
<p class="text">

	  The nil-child-p predicate returns true if the node
	  does not have a child node.
	</p>
</div>
<p/>
<div class="frame">
<i>child-p</i><i> (&rarr; Boolean)</i><i> (String | String String | String String String)</i><hr/>
<p class="text">

	  The child-p predicate returns true if the node
	  has a child with a node name argument. In the first form,
	  the name is to be matched by the predicate. In the second
	  form, the node nae and the attribute name must be
	  matched. In the third form, the node name, attribute name
	  and value must be matched.
	</p>
</div>
<p/>
<div class="frame">
<i>attribute-child-p</i><i> (&rarr; Boolean)</i><i> (String String | String String String)</i><hr/>
<p class="text">

	  The attribute-child-p predicate returns true if
	  the node has a child with an attribute name argument. In the
	  first form, the attribute name must be matched. In the
	  second form, the attribute name and value must be matched.
	</p>
</div>
<p/>
<div class="frame">
<i>lookup-child</i><i> (&rarr; XmlNode)</i><i> (String)</i><hr/>
<p class="text">

	  The lookup-child method returns a child node by
	  name. Unlike the get-child method, the method
	  raises an exception if the node cannot be found.
	</p>
</div>
<p/>
<div class="frame">
<i>child-length</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The child-length method returns the number of
	  children nodes.
	</p>
</div>
<p/>
<div class="frame">
<i>get-source-line</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The get-source-line method returns the node source
	  line number if any.
	</p>
</div>
<p/>
<div class="frame">
<i>set-source-line</i><i> (&rarr; none)</i><i> (Integer)</i><hr/>
<p class="text">

	  The set-source-line method sets the node source
	  line number.
	</p>
</div>
<p/>
<div class="frame">
<i>get-source-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-source-name method returns the node source
	  name if any.
	</p>
</div>
<p/>
<div class="frame">
<i>set-source-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-source-name method sets the node source
	  name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlTag</div>
<p class="text">
 The <tt class="code">XmlTag</tt> class is the base class used to represent a xml tag. A tag is defined with a name and an attribute list. The tag is derived from the xml node class and is not marked empty by default. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>tag-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlTag</i><i> (String)</i><hr/>
<p class="text">

	  The XmlTag constructor creates a tag node. The node
	  is not marked empty.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlTag</i><i> (String Boolean)</i><hr/>
<p class="text">

	  The XmlTag constructor creates a tag node. The
	  first argument is the tag name. The second argument is the empty
	  flag.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-name method sets the tag name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-name method returns the tag name.
	</p>
</div>
<p/>
<div class="frame">
<i>clear-attribute</i><i> (&rarr; none)</i><i> (node)</i><hr/>
<p class="text">

	  The clear-attribute method clear the node attribute list.
	</p>
</div>
<p/>
<div class="frame">
<i>add-attribute</i><i> (&rarr; none)</i><i> (Property)</i><hr/>
<p class="text">

	  The add-attribute method adds a new attribute to
	  the tag. The attribute must be new for this method to
	  succeed. In doubt, the set-attribute is
	  preferable.
	</p>
</div>
<p/>
<div class="frame">
<i>set-attribute</i><i> (&rarr; none)</i><i> (String Literal)</i><hr/>
<p class="text">

	  The set-attribute method sets an attribute to
	  the tag. The first argument is the attribute name. The second
	  argument is the attribute value. If the attribute already exists,
	  the old value is replaced with the new one.
	</p>
</div>
<p/>
<div class="frame">
<i>get-attribute</i><i> (&rarr; Property)</i><i> (Integer|String)</i><hr/>
<p class="text">

	  The get-attribute method returns a tag attribute in
	  the form o a property object. With an integer object, the
	  attribute is returned by index. With a string object, the
	  property is return by name. If the property is not found, nil is
	  returned.
	</p>
</div>
<p/>
<div class="frame">
<i>get-attribute-value</i><i> (&rarr; String)</i><i> (String)</i><hr/>
<p class="text">

	  The get-attribute-value method returns a tag
	  attribute value by name. The string argument is the attribute
	  name. If the property is not found, an exception is raised.
	</p>
</div>
<p/>
<div class="frame">
<i>lookup-attribute</i><i> (&rarr; Property)</i><i> (String)</i><hr/>
<p class="text">

	  The lookup-attribute method returns a tag
	  attribute by name in the form of a property. The string argument
	  is the attribute name. If the property is not found, an
	  exception is raised.
	</p>
</div>
<p/>
<div class="frame">
<i>attribute-length</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The attribute-length method returns the number of
	  attributes.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlText</div>
<p class="text">
 The <tt class="code">XmlText</tt> class is the xml text node. A text node is directly built by the xml reader and the content placed into a string. By definition, a text node is an empty node. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>text-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlText</i><i> (none)</i><hr/>
<p class="text">

	  The XmlText constructor creates a default text
	  node. By definition, a text node is an empty node.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlText</i><i> (String)</i><hr/>
<p class="text">

	  The XmlText constructor creates a text node with the
	  string argument.  
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-xval</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-xval method sets the text node value.
	</p>
</div>
<p/>
<div class="frame">
<i>get-xval</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xval method returns the text node value.
	</p>
</div>
<p/>
<div class="frame">
<i>to-normal</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The to-normal method returns the normalized text
	  node value.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlData</div>
<p class="text">
 The <tt class="code">XmlData</tt> class is the xml CDATA node. A data node differs from the text node in the sense that the data node contains characters that could be reserved characters such like markup delimiters. The data node is most of the time used to hold text used for scripting. The data node is an empty node. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>data-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlData</i><i> (none)</i><hr/>
<p class="text">

	  The XmlData constructor creates a default data
	  node. By definition, a data node is an empty node.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlData</i><i> (String)</i><hr/>
<p class="text">

	  The XmlData constructor creates a data node with the
	  string argument.  
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-xval</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-xval method sets the data node value.
	</p>
</div>
<p/>
<div class="frame">
<i>get-xval</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xval method returns the data node value.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlComment</div>
<p class="text">
 The <tt class="code">XmlComment</tt> class is the xml comment node. The comment node is a special node that holds the comment text. The comment node is an empty node. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>comment-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlComment</i><i> (none)</i><hr/>
<p class="text">

	  The XmlComment constructor creates a default comment
	  node. By definition, a comment node is an empty node.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlComment</i><i> (String)</i><hr/>
<p class="text">

	  The XmlComment constructor creates a comment node with the
	  string argument.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-xval</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-xval method sets the comment node value.
	</p>
</div>
<p/>
<div class="frame">
<i>get-xval</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xval method returns the comment node value.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlDoctype</div>
<p class="text">
 The <tt class="code">XmlDoctype</tt> class is the xml document type node. In its simplest form, the document type has just a name which acts the starting tag for the document. The document type can also be associated with a system or a public identifier. Note also that a local root node can be attached to this node. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>doctype-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlDoctype</i><i> (String)</i><hr/>
<p class="text">

	  The XmlDoctype constructor creates a document type
	  with a starting tag name as the string argument. This is the
	  simplest form of a document type definition.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlDoctype</i><i> (String String)</i><hr/>
<p class="text">

	  The XmlDoctype constructor creates a document type
	  with a starting tag name and a system identifier. The first
	  string argument is the tag name. The second argument is the
	  system identifier.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlDoctype</i><i> (String String String)</i><hr/>
<p class="text">

	  The XmlDoctype constructor creates a document type
	  with a starting tag name, a public and a system identifier. The first
	  string argument is the tag name. The second argument is the
	  public identifier. The third argument is the system identifier.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>get-xval</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xval method returns the document type
	  starting tag name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-public-id</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-public-id method returns the document type
	  public identifier.
	</p>
</div>
<p/>
<div class="frame">
<i>get-system-id</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-system-id method returns the document type
	  system identifier.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlPi</div>
<p class="text">
 The <tt class="code">XmlPi</tt> class is the xml processing node. The processing node is a tag node. Although a processing node is seen as tag with attributes, the specification describes the processing node as a special tag with a string value. The processing node is an empty node. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>pi-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlPi</i><i> (String)</i><hr/>
<p class="text">

	  The XmlPi constructor creates a processing node with the
	  name string argument.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlPi</i><i> (String String)</i><hr/>
<p class="text">

	  The XmlPi constructor creates a processing node with the
	  name string argument and the string value. The first argument is
	  the tag name. The second argument is the processing node value.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-name method sets the xml pi node name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-name method returns the pi node name.
	</p>
</div>
<p/>
<div class="frame">
<i>set-xval</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-xval method sets the processing node value.
	</p>
</div>
<p/>
<div class="frame">
<i>get-xval</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xval method returns the processing node value.
	</p>
</div>
<p/>
<div class="frame">
<i>map-xval</i><i> (&rarr; Plist)</i><i> (String)</i><hr/>
<p class="text">

	  The map-xval method map the processing node value
	  to a property list.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlDecl</div>
<p class="text">
 The <tt class="code">XmlDecl</tt> class is the xml declaration node. The declaration node is a processing node. A declaration node is defined with a version id, an encoding string and a standalone flag. Each value is represented by an attribute at the tag level. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>decl-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlPi
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlDecl</i><i> (none)</i><hr/>
<p class="text">

	  The XmlDecl constructor creates a default
	  declaration node. By default, the declaration node is set with
	  the xml version 1.0, the UTF-8 encoding and the standalone flag
	  is not set.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlDecl</i><i> (String)</i><hr/>
<p class="text">

	  The XmlDecl constructor creates a declaration
	  node with a version. The string argument is the xml version
	  version which must be a supported one.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlDecl</i><i> (String String)</i><hr/>
<p class="text">

	  The XmlDecl constructor creates a declaration
	  node with a version and an encoding. The string argument is the
	  xml version version which must be a supported one. The second
	  argument is the xml encoding.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlDecl</i><i> (String String String)</i><hr/>
<p class="text">

	  The XmlDecl constructor creates a declaration
	  node with a version, an encoding and a standalone flag. The
	  string argument is the xml version version which must be a
	  supported one. The second argument is the xml encoding. The
	  third argument is the standalone flag.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlRef</div>
<p class="text">
 The <tt class="code">XmlRef</tt> class is the xml reference node class. This class is a base class which cannot be instantiated directly. The class is designed to hold reference, the only element which is in common is the string representation. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>ref-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-xref</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-xref method sets the node reference name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-xref</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xref method returns the node reference name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlCref</div>
<p class="text">
 The <tt class="code">XmlCref</tt> class is the xml character reference node class. Normally this class should only be used when building a xml tree manually. During a parsing process, the character reference is automatically expanded. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>cref-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlRef
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlCref</i><i> (none)</i><hr/>
<p class="text">

	  The XmlCref constructor creates a default
	  character reference those value is the null character.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlCref</i><i> (Character|Integer)</i><hr/>
<p class="text">

	  The XmlCref constructor creates a character
	  reference those value is the character or integer argument.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-value</i><i> (&rarr; none)</i><i> (Character|Integer)</i><hr/>
<p class="text">

	  The set-value method sets the character reference
	  value by character or integer.
	</p>
</div>
<p/>
<div class="frame">
<i>get-value</i><i> (&rarr; Character)</i><i> (none)</i><hr/>
<p class="text">

	  The get-value method returns the character
	  reference value.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlEref</div>
<p class="text">
 The <tt class="code">XmlEref</tt> class is the xml entity reference node class. The entity reference is defined with a reference name. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>eref-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlRef
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlEref</i><i> (none)</i><hr/>
<p class="text">

	  The XmlCref constructor creates an empty 
	  entity reference.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlCref</i><i> (String)</i><hr/>
<p class="text">

	  The XmlEref constructor creates an entity
	  reference those value is the string argument.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlSection</div>
<p class="text">
 The <tt class="code">XmlSection</tt> class is the xml section type node. A section node is used to model conditional section that are part of a DTD. The section value is a string that is evaluated by the xml processor. Most of the time, it is a parameter entity reference which corresponds to the keyword INCLUDE or IGNORE , but it could be anything else. A node is also attached to this section. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>section-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>xmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlSection</i><i> (String)</i><hr/>
<p class="text">

	  The XmlSection constructor creates a xml section
	  node by value.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>get-xval</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xval method returns the section node value.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlAttlist</div>
<p class="text">
 The <tt class="code">XmlAttlist</tt> class is the xml attribute list node class. A xml attribute list is primarily defined with two names. The first name is the element and the second name is the attribute name. There are 3 types of attribute list. The string type, the token type and the enumeration type. The class manages each type by associating a type descriptor which is detected at construction. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>attlist-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlAttlist</i><i> (String String)</i><hr/>
<p class="text">

	  The XmlAttlist constructor creates an attribute list
	  by element name and attribute name. The first argument is the
	  element name. The second argument is the attribute name.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-element-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-element-name method sets the attribute list
	  element name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-element-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-element-name method returns the attribute list
	  element name.
	</p>
</div>
<p/>
<div class="frame">
<i>set-attribute-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-attribute-name method sets the attribute list
	  name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-attribute-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-attribute-name method returns the attribute list
	  name.
	</p>
</div>
<p/>
<div class="frame">
<i>set-type</i><i> (&rarr; none)</i><i> (String | Vector Boolean)</i><hr/>
<p class="text">

	  The set-type method set the attribute type by
	  string or enumeration vector. In its first form, the attribute
	  type is defined by a string. The type can be either, "CDATA",
	  "ID", "IDREF", "IDREFS", "ENTITY", "ENTITIES", "NMTOKEN" or
	  "NMTOKENS". In the second form, the attribute type is an
	  enumeration those values are defined in the argument vector. The
	  boolean argument controls the notation flag for that enumeration.
	</p>
</div>
<p/>
<div class="frame">
<i>set-default</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-default method set the attribute value by
	  string. The string can be any value or the special value
	  "#IMPLIED" and "#REQUIRED". If the default value is fixed, the
	  set-fixed is the preferred method. 
	</p>
</div>
<p/>
<div class="frame">
<i>set-fixed</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-fixed method set the fixed attribute
	  default value by string. 
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlRoot</div>
<p class="text">
 The <tt class="code">XmlRoot</tt> class is the top level root instantiated by the xml reader when starting to parse a stream. There should be only one root node in a tree. The root node does not have a parent node. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>root-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlRoot</i><i> (none)</i><hr/>
<p class="text">

	  The XmlRoot constructor creates a default xml root
	  node which is empty.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>dup-body</i><i> (&rarr; XmlBody)</i><i> (none)</i><hr/>
<p class="text">

	  The dup-body method duplicates the root node by
	  duplicating the root body without the declaration node.
	</p>
</div>
<p/>
<div class="frame">
<i>declaration-p</i><i> (&rarr; Boolean)</i><i> (none)</i><hr/>
<p class="text">

	  The declaration-p predicate returns true if a declaration
	  node exists in the root node.
	</p>
</div>
<p/>
<div class="frame">
<i>get-declaration</i><i> (&rarr; XmlDecl)</i><i> (none)</i><hr/>
<p class="text">

	  The get-declaration method returns the declaration
	  node associated with the root node. Normally, the declaration
	  node is the first child node. If the declaration node does not
	  exist, an exception is raised.
	</p>
</div>
<p/>
<div class="frame">
<i>get-encoding</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-encoding method returns the root encoding mode.
	  The root encoding mode is extracted from the declaration node,
	  if such node exists, or the default xml system encoding is returned.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlDocument</div>
<p class="text">
 The <tt class="code">XmlDocument</tt> class is the xml document class. The document class is the root document class that maintains a xml document along with its associated tree and other useful information. Generally the class is constructed with a file name or a name and an input stream that is used for parsing the input data. The document can also be designed by constructing manually the document tree. In that case, the document name must be set explicitly. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>document-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Nameable
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlDocument</i><i> (none)</i><hr/>
<p class="text">

	  The XmlDocument constructor creates a default xml
	  document.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlDocument</i><i> (String)</i><hr/>
<p class="text">

	  The XmlDocument constructor creates a xml document
	  by parsing the file. The file name is the string argument.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlDocument</i><i> (String InputStream)</i><hr/>
<p class="text">

	  The XmlDocument constructor creates a xml document
	  by name and by parsing the input stream. The first argument is
	  the xml document name. The second argument is the input stream
	  to parse.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlDocument</i><i> (String XmlRoot)</i><hr/>
<p class="text">

	  The XmlDocument constructor creates a xml document
	  by name and root node. The first argument is the xml document
	  name. The second argument is the xml root node.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-name method sets the xml document name. The
	  get-name method is available from the
	  nameable base class.
	</p>
</div>
<p/>
<div class="frame">
<i>get-root</i><i> (&rarr; XmlRoot)</i><i> (none)</i><hr/>
<p class="text">

	  The get-root method returns the document xml root
	  node.
	</p>
</div>
<p/>
<div class="frame">
<i>get-body</i><i> (&rarr; XmlRoot)</i><i> (none)</i><hr/>
<p class="text">

	  The get-body method returns the document xml root
	  node body without the declaration node.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlElement</div>
<p class="text">
 The <tt class="code">XmlElement</tt> class is the xml element class node. A xml element is represented with a name and a value. It is during the processing phase that the element value is interpreted. An element is built with a name and a value. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>element-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlElement</i><i> (String String)</i><hr/>
<p class="text">

	  The XmlElement constructor creates a xml element by
	  name and value. The first argument is the element name. The
	  second argument is the argument value.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-name method sets the xml element name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-name method returns the element name.
	</p>
</div>
<p/>
<div class="frame">
<i>set-xval</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-xval method sets the xml element value.
	</p>
</div>
<p/>
<div class="frame">
<i>get-xval</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xval method returns the element value.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlEntity</div>
<p class="text">
 The <tt class="code">XmlEntity</tt> class is the base class for the xml entity representation. A xml entity can be either a general entity or a parameter entity. They differ initially with the presence of the '%' character. Both entity model have a name which is path of the base class. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>entity-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlNode
</i>
</pre>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-name method sets the entity name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-name method returns the entity name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlGe</div>
<p class="text">
 The <tt class="code">XmlGe</tt> class is the xml general entity node. In its simplest form, the general entity has a name and a value. The entity type can also be associated with a system or a public identifier with or without an extra type name. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>ge-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlEntity
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlGe</i><i> (String String)</i><hr/>
<p class="text">

	  The XmlGe constructor creates a xml entity by
	  name and value. The first argument is the entity name. The
	  second argument is the entity value. Most of the time, the
	  entity value is a parameter entity.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlGe</i><i> (String String String)</i><hr/>
<p class="text">

	  The XmlGe constructor creates a xml entity by
	  name and identifier. The first argument is the entity name. The
	  second argument is the entity public identifier. The third
	  argument is the entity system identifier.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlGe</i><i> (String String String String)</i><hr/>
<p class="text">

	  The XmlGe constructor creates a xml entity by
	  name, identifier and data type. The first argument is the entity
	  name. The second argument is the entity public identifier. the
	  third argument is the entity system identifier. The fourth
	  argument is the entity type name.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>get-xval</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xval method returns the entity value.
	</p>
</div>
<p/>
<div class="frame">
<i>get-data</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-data method returns the entity data type.
	</p>
</div>
<p/>
<div class="frame">
<i>get-public-id</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-public-id method returns the entity public
	  identifier.
	</p>
</div>
<p/>
<div class="frame">
<i>get-system-id</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-system-id method returns the entity system
	  identifier.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlPe</div>
<p class="text">
 The <tt class="code">XmlPe</tt> class is the xml parameter entity node. In its simplest form, the parameter entity has a name and a value. The entity type can also be associated with a system or a public identifier. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>ge-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>XmlEntity
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlPe</i><i> (String String)</i><hr/>
<p class="text">

	  The XmlGe constructor creates a xml entity by
	  name and value. The first argument is the entity name. The
	  second argument is the entity value.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlPe</i><i> (String String String)</i><hr/>
<p class="text">

	  The XmlGe constructor creates a xml entity by
	  name and identifier. The first argument is the entity name. The
	  second argument is the entity public identifier. The third
	  argument is the entity system identifier.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>get-xval</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-xval method returns the entity value.
	</p>
</div>
<p/>
<div class="frame">
<i>get-public-id</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-public-id method returns the entity public
	  identifier.
	</p>
</div>
<p/>
<div class="frame">
<i>get-system-id</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-system-id method returns the entity system
	  identifier.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XmlReader</div>
<p class="text">
 The <tt class="code">XmlReader</tt> class is the xml parser that operates on an input stream. The reader creates a tree of nodes by reading the input stream and returns the root node when an end-of-stream is reached. Multiple read can be done sequentially. If the reset method is not called between multiple read passes, the reader will accumulate the nodes in the current tree. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>reader-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Object
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlReader</i><i> (none)</i><hr/>
<p class="text">

	  The XmlReader constructor creates a default xml reader.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>reset</i><i> (&rarr; none)</i><i> (none)</i><hr/>
<p class="text">

	  The reset method resets the xml reader. In
	  particular, the root node is restored to the nil node.
	</p>
</div>
<p/>
<div class="frame">
<i>parse</i><i> (&rarr; none)</i><i> (InputStream|String)</i><hr/>
<p class="text">

	  The parse method parses an input stream or a file.
	  During the parsing process, the root node is filled with the
	  parsed nodes.
	</p>
</div>
<p/>
<div class="frame">
<i>get-root</i><i> (&rarr; XmlRoot)</i><i> (none)</i><hr/>
<p class="text">

	  The get-root method returns the parsed root node.
	</p>
</div>
<p/>
<div class="frame">
<i>get-node</i><i> (&rarr; XmlNode)</i><i> (String)</i><hr/>
<p class="text">

	  The get-node method parse a string and returns a node.
	</p>
</div>
<p/>
<p/>
<div class="elem">
Xne</div>
<p class="text">
 The <tt class="code">Xne</tt> is a nameset that binds constants used by the xne system. </p>
<p class="elem">
Constants</p>
<div class="frame">
<i>ID</i><hr/>
<p class="text">

	  The ID constant defines a node access by id.
	</p>
</div>
<p/>
<div class="frame">
<i>PI</i><hr/>
<p class="text">

	  The PI constant defines an access selector for a processing
	  instruction node.
	</p>
</div>
<p/>
<div class="frame">
<i>GE</i><hr/>
<p class="text">

	  The GE constant defines an access selector for a general
	  entity node.
	</p>
</div>
<p/>
<div class="frame">
<i>TAG</i><hr/>
<p class="text">

	  The TAG constant defines an access selector for a tag
	  node.
	</p>
</div>
<p/>
<div class="frame">
<i>ENT</i><hr/>
<p class="text">

	  The ENT constant defines an access selector for an entity
	  node.
	</p>
</div>
<p/>
<div class="frame">
<i>EREF</i><hr/>
<p class="text">

	  The EREF constant defines an access selector for an entity
	  reference node.
	</p>
</div>
<p/>
<div class="frame">
<i>CREF</i><hr/>
<p class="text">

	  The CREF constant defines an access selector for an
	  character reference node.
	</p>
</div>
<p/>
<div class="frame">
<i>ELEM</i><hr/>
<p class="text">

	  The ELEM constant defines an access selector for an
	  element node.
	</p>
</div>
<p/>
<div class="frame">
<i>TEXT</i><hr/>
<p class="text">

	  The TEXT constant defines an access selector for a
	  text node.
	</p>
</div>
<p/>
<div class="frame">
<i>NAME</i><hr/>
<p class="text">

	  The NAME constant defines a node access by name.
	</p>
</div>
<p/>
<div class="frame">
<i>CDATA</i><hr/>
<p class="text">

	  The CDATA constant defines an access selector for a
	  character data node.
	</p>
</div>
<p/>
<div class="frame">
<i>INDEX</i><hr/>
<p class="text">

	  The INDEX constant defines a node access by child
	  index. The child index is node index seen from the parent.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XneTree</div>
<p class="text">
 The <tt class="code">XneTree</tt> is the xne node tree manipulation class. The class operates with a node and provides numerous methods to manipulate the tree as well as changing it. Before a tree is manipulated, it is recommended to make a copy of such tree with the help of the node <tt class="code">copy</tt> method. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xne-tree-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Object
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XmlTree</i><i> (none)</i><hr/>
<p class="text">

	  The XmlTree constructor creates a default tree
	  without a node.
	</p>
</div>
<p/>
<div class="frame">
<i>XmlTree</i><i> (XmlNode)</i><hr/>
<p class="text">

	  The XmlTree constructor creates a tree with a xml
	  node. The node stored in the object is the root of the tree
	  subject to the operations.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>depth</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The depth method returns the depth of the tree.
	</p>
</div>
<p/>
<div class="frame">
<i>generate-id</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The generate-id method generate a unique id for all
	  node in the tree. The id attribute is set by this method.
	</p>
</div>
<p/>
<div class="frame">
<i>set-node</i><i> (&rarr; none)</i><i> (XmlNode)</i><hr/>
<p class="text">

	  The set-node method sets the root tree node.
	</p>
</div>
<p/>
<div class="frame">
<i>get-node</i><i> (&rarr; XmlNode)</i><i> (none)</i><hr/>
<p class="text">

	  The get-node method returns the root tree node.
	</p>
</div>
<p/>
<div class="frame">
<i>set-attribute</i><i> (&rarr; none)</i><i> (none|String)</i><hr/>
<p class="text">

	  The set-attribute method sets an attribute to the
	  whole tree. In the first form, the attribute is set to the whole
	  tree. In the second form with a string argument, the attribute
	  is set only on the tag node those name matches the name argument.
	</p>
</div>
<p/>
<div class="frame">
<i>clear-attribute</i><i> (&rarr; none)</i><i> (none|String)</i><hr/>
<p class="text">

	  The clear-attribute method clear all attributes of
	  the nodes in the tree. In the first form, the node attributes
	  are cleared for all nodes in the tree. In the second form with a
	  string argument, the attributes are cleared only with the tag
	  node those name matches the name argument.
	</p>
</div>
<p/>
<div class="frame">
<i>set-prefix</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-prefix method sets a prefix on all nodes
	  in the tree.
	</p>
</div>
<p/>
<div class="frame">
<i>clear-prefix</i><i> (&rarr; none)</i><i> (none)</i><hr/>
<p class="text">

	  The clear-prefix method clear the prefix for all
	  nodes in the tree.
	</p>
</div>
<p/>
<div class="frame">
<i>select</i><i> (&rarr; Vector)</i><i> (XneCond [Boolean])</i><hr/>
<p class="text">

	  The select method selects the node in the tree that
	  matches the condition argument. In the first form, with one
	  argument, the whole tree is searched. In the second form, with a
	  boolean argument, the whole tree is searched if the second
	  argument is false. If the boolean argument is true, the method
	  call behaves like a call with the condition only.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XneChild</div>
<p class="text">
 The <tt class="code">XneCond</tt> is the xne condition class. The sole purpose of this class is to define one or several condition that a node must satisfy in order to be selected. The condition are accumulated in a list and later checked for a particular node. Note that an empty condition always succeeds. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xne-cond-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Object
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XneCond</i><i> (none)</i><hr/>
<p class="text">

	  The XneCond constructor creates a default
	  condition. The default condition is empty. The empty condition
	  always succeeds.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>add</i><i> (&rarr; none)</i><i> (Xne [String|Integer])</i><hr/>
<p class="text">

	  The add adds a condition by type. The first
	  argument is the condition type. The second argument is a
	  condition information such like a string or an integer.
	</p>
</div>
<p/>
<div class="frame">
<i>valid-p</i><i> (&rarr; Boolean)</i><i> (XmlNode)</i><hr/>
<p class="text">

	  The valid-p predicate checks that a node
	  matches a condition. If the condition succeeds, the predicate
	  returns true.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XsmNode</div>
<p class="text">
 The <tt class="code">XsmNode</tt> is a base class which is part of the xml simple model (xsm). In this model, a xml (or sgml, or html) text is represented by a node which can be either a tag, a text or a reference node. There is no concept of tree. The node content is stored in the form of a text string. This simple model is designed to parse weak data representation such like html text and later process it at the user discretion. The default representation is an empty text node. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xsm-node-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Object
</i>
</pre>
<p class="elem">
Constants</p>
<div class="frame">
<i>TXT</i><hr/>
<p class="text">

	  The TXT constant defines a xsm text node.
	</p>
</div>
<p/>
<div class="frame">
<i>TAG</i><hr/>
<p class="text">

	  The TAG constant defines a xsm tag node.
	</p>
</div>
<p/>
<div class="frame">
<i>REF</i><hr/>
<p class="text">

	  The REF constant defines a xsm reference node.
	</p>
</div>
<p/>
<div class="frame">
<i>END</i><hr/>
<p class="text">

	  The END constant defines a xsm end node.
	</p>
</div>
<p/>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XsmNode</i><i> (none)</i><hr/>
<p class="text">

	  The XsmNode constructor creates a default xsm node
	  which is an empty text node.
	</p>
</div>
<p/>
<div class="frame">
<i>XsmNode</i><i> (String)</i><hr/>
<p class="text">

	  The XsmNode constructor creates a xsm text node by value.
	  The string argument is the text node value
	</p>
</div>
<p/>
<div class="frame">
<i>XsmNode</i><i> (Item String)</i><hr/>
<p class="text">

	  The XsmNode constructor creates a xsm text node by
	  type and value. The first argument is the node type. The second
	  argument is the node text value.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>text-p</i><i> (&rarr; Boolean)</i><i> (none)</i><hr/>
<p class="text">

	  The text-p predicate returns true if the node is a
	  text node.
	</p>
</div>
<p/>
<div class="frame">
<i>tag-p</i><i> (&rarr; Boolean)</i><i> (none)</i><hr/>
<p class="text">

	  The tag-p predicate returns true if the node is a
	  tag node.
	</p>
</div>
<p/>
<div class="frame">
<i>ref-p</i><i> (&rarr; Boolean)</i><i> (none)</i><hr/>
<p class="text">

	  The reference-p predicate returns true if the node is a
	  reference node.
	</p>
</div>
<p/>
<div class="frame">
<i>end-p</i><i> (&rarr; Boolean)</i><i> (none)</i><hr/>
<p class="text">

	  The end-p predicate returns true if the node is a
	  reference node.
	</p>
</div>
<p/>
<div class="frame">
<i>normal-p</i><i> (&rarr; Boolean)</i><i> (none)</i><hr/>
<p class="text">

	  The normal-p predicate returns true if the node is a
	  normal tag node.
	</p>
</div>
<p/>
<div class="frame">
<i>reserved-p</i><i> (&rarr; Boolean)</i><i> (none)</i><hr/>
<p class="text">

	  The reserved-p predicate returns true if the node is a
	  reserved tag node.
	</p>
</div>
<p/>
<div class="frame">
<i>textable-p</i><i> (&rarr; Boolean)</i><i> (none)</i><hr/>
<p class="text">

	  The textable-p predicate returns true if the node is a
	  textable node, that is a text node or a reference node.
	</p>
</div>
<p/>
<div class="frame">
<i>get-source-line</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The get-source-line method returns the node source
	  line number if any.
	</p>
</div>
<p/>
<div class="frame">
<i>set-source-line</i><i> (&rarr; none)</i><i> (Integer)</i><hr/>
<p class="text">

	  The set-source-line method sets the node source
	  line number.
	</p>
</div>
<p/>
<div class="frame">
<i>get-source-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-source-name method returns the node source
	  name if any.
	</p>
</div>
<p/>
<div class="frame">
<i>set-source-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-source-name method sets the node source
	  name.
	</p>
</div>
<p/>
<div class="frame">
<i>get-name</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-name method returns the next available name.
	  name.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XsmReader</div>
<p class="text">
 The <tt class="code">XmlReader</tt> class is the simple model node reader. The reader operates with the <tt class="code">parse</tt> method and returns a node or nil if the end of stream is reached. Unlike the xml reader, this reader does not build a tree and the node content is not even parsed. In this model, the node content is to be interpreted at the user discretion. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xsm-reader-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Object
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XsmReader</i><i> (none)</i><hr/>
<p class="text">

	  The XsmReader constructor creates a default xsm
	  reader. The reader is not bound to any stream.
	</p>
</div>
<p/>
<div class="frame">
<i>XsmReader</i><i> (InputStream)</i><hr/>
<p class="text">

	  The XsmReader constructor creates a xsm
	  reader with an input stream. The argument is the input bound to
	  the reader.
	</p>
</div>
<p/>
<div class="frame">
<i>XsmReader</i><i> (String)</i><hr/>
<p class="text">

	  The XsmReader constructor creates a xsm
	  reader with an input string stream. The argument is a string
	  which is used to create an input string stream bound to the reader.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-input-stream</i><i> (&rarr; none)</i><i> (InputStream)</i><hr/>
<p class="text">

	  The set-input-stream method bind a new input stream
	  to the reader. Subsequent read will use the newly bound stream
	</p>
</div>
<p/>
<div class="frame">
<i>get-node</i><i> (&rarr; XsmNode)</i><i> (none)</i><hr/>
<p class="text">

	  The get-node method parses the input stream and
	  returns the available node.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XsmDocument</div>
<p class="text">
 The <tt class="code">XsmDocument</tt> class is the document class that maintains a xsm document along with its associated list of nodes and other useful information. Generally the class is constructed with a file name or a name and an input stream that is used for parsing the input data. When the input stream has been parsed, the nodes are stored in a vector which can be access by index. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>document-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Nameable
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XsmDocument</i><i> (none)</i><hr/>
<p class="text">

	  The XsmDocument constructor creates a default xsm
	  document.
	</p>
</div>
<p/>
<div class="frame">
<i>XsmDocument</i><i> (String)</i><hr/>
<p class="text">

	  The XsmDocument constructor creates a xsm document
	  by name. The string argument is the file name to parse.
	</p>
</div>
<p/>
<div class="frame">
<i>XsmDocument</i><i> (String InputStream)</i><hr/>
<p class="text">

	  The XsmDocument constructor creates a xsm document
	  by name and by parsing the input stream. The first argument is
	  the xsm document name. The second argument is the input stream
	  to parse.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-name method sets the xsm document name. The
	  get-name method is available from the
	  nameable base class.
	</p>
</div>
<p/>
<div class="frame">
<i>length</i><i> (&rarr; Integer)</i><i> (none)</i><hr/>
<p class="text">

	  The length method returns the xsm document
	  length. The document length is the number of nodes parsed and
	  stored in the document.
	</p>
</div>
<p/>
<div class="frame">
<i>get-node</i><i> (&rarr; XsmNode)</i><i> (Integer)</i><hr/>
<p class="text">

	  The get-node method returns a document node by
	  index.
	</p>
</div>
<p/>
<div class="frame">
<i>get-info</i><i> (&rarr; XsoInfo)</i><i> (Integer [Boolean])</i><hr/>
<p class="text">

	  The get-info method returns a node info object by
	  index. The info object is evaluated dynamically from the
	  document node. In the first form, the node name is used to find
	  the node end tag in order to construct the info text value. In
	  the second form, the boolean argument, if true, forces the node
	  name to be converted to lower case prior any comparison.
	</p>
</div>
<p/>
<div class="frame">
<i>get-info-vector</i><i> (&rarr; XsoInfo)</i><i> (String [Boolean])</i><hr/>
<p class="text">

	  The get-info-vetcor method returns an info
	  object vector by name. Each info object have their name that
	  matches the string argument. The info object is evaluated
	  dynamically from the document node. In the first form, the node
	  name is used to match a tag node and then find the node end tag
	  in order to construct the info text value. In the second form,
	  the boolean argument, if true, forces the node name to be
	  converted to lower case prior any comparison.
	</p>
</div>
<p/>
<p/>
<div class="elem">
XsoInfo</div>
<p class="text">
 The <tt class="code">XsoInfo</tt> class is a xml/xsm information node used to carry simple information about a tag. The node is constructed by name, with a set of attributes and eventually a text associated with the node. The text information is generally the one associated between the start tag and the end tag. In the case of complex tree, such text data might be empty. </p>
<p class="elem">
Predicate</p>
<pre class="frame">
<i>xso-info-p

</i></pre>
<p class="elem">
Inheritance</p>
<pre class="frame">
<i>Nameable
</i>
</pre>
<p class="elem">
Constructors</p>
<div class="frame">
<i>XsoInfo</i><i> (none)</i><hr/>
<p class="text">

	  The XsoInfo constructor creates a default info
	  object.
	</p>
</div>
<p/>
<div class="frame">
<i>XsoInfo</i><i> (String)</i><hr/>
<p class="text">

	  The XsoInfo constructor creates an info object by
	  name. The string argument is the node info name.
	</p>
</div>
<p/>
<div class="frame">
<i>XsoInfo</i><i> (String String)</i><hr/>
<p class="text">

	  The XsoInfo constructor creates an info object by
	  name and text. The first argument is the node info name. The
	  second argument is the node text information.
	</p>
</div>
<p/>
<p class="elem">
Methods</p>
<div class="frame">
<i>set-name</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-name method sets the info object name.
	</p>
</div>
<p/>
<div class="frame">
<i>set-attribute</i><i> (&rarr; none)</i><i> (String Literal)</i><hr/>
<p class="text">

	  The set-attribute method sets an attribute by name
	  and value. The first argument is the attribute name. The second
	  argument is the attribute value.
	</p>
</div>
<p/>
<div class="frame">
<i>get-attribute-list</i><i> (&rarr; Plist)</i><i> (none)</i><hr/>
<p class="text">

	  The get-attribute-list method returns the node
	  attribute list in the form of a property list object.
	</p>
</div>
<p/>
<div class="frame">
<i>get-attribute-value</i><i> (&rarr; String)</i><i> (String)</i><hr/>
<p class="text">

	  The get-attribute-value method returns the attribute
	  value by name. The string argument is the attribute name.
	</p>
</div>
<p/>
<div class="frame">
<i>set-text</i><i> (&rarr; none)</i><i> (String)</i><hr/>
<p class="text">

	  The set-text method sets the info object text.
	</p>
</div>
<p/>
<div class="frame">
<i>get-text</i><i> (&rarr; String)</i><i> (none)</i><hr/>
<p class="text">

	  The get-text method returns the text information.
	</p>
</div>
<p/>
</body>
</html>
